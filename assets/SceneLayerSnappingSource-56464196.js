import{e as i,y as o,a as u,ad as w,f as _,ah as S,aj as f,$ as y,nq as g,dV as k,ak as b,v as C,cU as L,R as H}from"./calcite-c5ae4991.js";import{bW as E}from"./MediaLayerVideo-b25b4fca.js";import{h as O}from"./LercDecoder-25ed2639.js";import{E as $}from"./sphere-5ce3b13c.js";import{r as I,l as R}from"./DimensionAnalysisView3D-afedf533.js";import{r as V}from"./VertexSnappingCandidate-a79ea0a5.js";import"./index-9a6385f7.js";import"./mat4f64-abdda1bb.js";import"./Util-2b929b00.js";import"./plane-6ecad71b.js";import"./spatialReferenceEllipsoidUtils-87122df3.js";import"./scaleUtils-a8d07219.js";import"./ElevationSamplerData-41a54d7d.js";import"./objectResourceUtils-8fb711c9.js";import"./devEnvironmentUtils-5002a058.js";import"./mat3f64-50f3b9f6.js";import"./BufferView-bc307796.js";import"./vec33-164586fc.js";import"./DefaultMaterial_COLOR_GAMMA-941dbf6c.js";import"./types-e1c0a5bf.js";import"./enums-e2e92c86.js";import"./Version-e2fa8281.js";import"./quat-8dcd84de.js";import"./quatf64-f8f1c132.js";import"./resourceUtils-527631ac.js";import"./basicInterfaces-7449a8bf.js";import"./Indices-84de656e.js";import"./NestedMap-1b5db22e.js";import"./requestImageUtils-67552ee5.js";import"./symbolColorUtils-14fb8f64.js";import"./VertexAttribute-15d1866a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./OrderIndependentTransparency-5f7257d7.js";import"./Texture-3d2bcec7.js";import"./FramebufferObject-d9042b3f.js";import"./VertexElementDescriptor-2925c6af.js";import"./InterleavedLayout-45bbbdfe.js";import"./vec3f32-01c06d8d.js";import"./Octree-65a3a6a2.js";import"./edgeProcessing-fca251f2.js";import"./deduplicate-54cc928a.js";import"./MeshComponent-9e26db57.js";import"./earcut-61f7b102.js";import"./imageUtils-c2d0d1ae.js";import"./projection-425e8064.js";import"./ZoomMomentumEstimator-f0d7cb62.js";import"./floatRGBA-2dd25736.js";import"./dehydratedFeatures-ce9ee959.js";import"./quantizationUtils-a15bd53f.js";import"./labelFormatUtils-2486d06e.js";import"./orientedBoundingBox-d2c06194.js";import"./quatf32-51a323b8.js";import"./SnappingCandidate-970faec6.js";import"./callExpressionWithFeature-94cb1131.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./geometryServiceUtils-b1997a16.js";import"./project-0e0370f9.js";import"./VectorTile-ade0a955.js";import"./enums-fb086c25.js";import"./config-1337d16e.js";import"./TiledDisplayObject-0268aa47.js";import"./DisplayObject-b5071d0a.js";import"./rasterUtils-0aabb0e8.js";import"./resources-4ce48b80.js";import"./workerHelper-33dafb63.js";import"./webgl-debug-7f880832.js";import"./RenderingContext-f0258ff2.js";import"./ProgramCache-ddf14e3e.js";import"./Program-2221c2b1.js";import"./MediaLayer-faedb24a.js";import"./MediaElementView-92573d58.js";import"./normalizeUtilsSync-f9670301.js";import"./resourceExtension-a1892050.js";import"./BoundsStore-32c0ea98.js";import"./PooledRBush-52d39e88.js";import"./prism-line-numbers-713161a8.js";import"./label2-e5a29f4c.js";import"./interactive-1de2e238.js";import"./loadable-6afd516d.js";import"./t9n-b59ffad1.js";import"./observers-c89705b8.js";import"./icon-179b3e31.js";import"./loader-dc9b20b1.js";import"./guid-51402ee7.js";import"./LineVisualElement-520cb14e.js";import"./LengthDimension-f30ab776.js";import"./Segment-dbfb173b.js";import"./elevationInfoUtils-def3e352.js";import"./analysisViewUtils-ad794640.js";import"./ImageMaterial-b8486f1d.js";import"./Factory-7ff71f8e.js";import"./RightAngleQuadVisualElement-2c22a714.js";import"./VisualElementResources-de04f9e5.js";import"./PointVisualElement-e21f219e.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-59135cd9.js";import"./QueryEngineResult-7bb9e34b.js";import"./WhereClause-19168e5f.js";import"./executionError-fb3f283a.js";import"./utils-d04d4fee.js";import"./generateRendererUtils-0781e0f0.js";import"./projectionSupport-c2c1f4b7.js";import"./json-48e3ea08.js";import"./utils-d27f2aa1.js";import"./dehydratedFeatureComparison-52788bbf.js";import"./RenderTexture-4c0a650d.js";let p=class extends w{constructor(t){super(t),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new j(this.schedule,{fetchAllEdgeLocations:(t,e)=>this._fetchAllEdgeLocations(t,e)})}async fetchCandidates(t,e){const r=t.coordinateHelper,{point:s}=t,a=P;this.renderCoordsHelper.toRenderCoords(s,r.spatialReference,a);const m=t.distance,d=typeof m=="number"?m:m.distance,l=await this._workerHandle.invoke({bounds:$(a[0],a[1],a[2],d),types:t.types},e);return l.candidates.sort((h,v)=>h.distance-v.distance),l.candidates.map(h=>this._convertCandidate(r,h))}async add(t,e){this._ids.add(t.id),await this._workerHandle.invokeMethod("add",t,e)}async remove(t,e){this._ids.delete(t.id),await this._workerHandle.invokeMethod("remove",t,e)}_convertCandidate(t,e){switch(e.type){case"edge":return new I({objectId:e.objectId,targetPoint:this._convertRenderCoordinate(t,e.target),edgeStart:this._convertRenderCoordinate(t,e.start),edgeEnd:this._convertRenderCoordinate(t,e.end),isDraped:!1});case"vertex":return new V({objectId:e.objectId,targetPoint:this._convertRenderCoordinate(t,e.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:t},e){const r=_();return this.renderCoordsHelper.fromRenderCoords(e,r,t),R(r)}async _fetchAllEdgeLocations(t,e){const r=[],s=[];for(const{id:a,uid:m}of t.components)this._ids.has(a)&&r.push((async()=>{const d=await this.fetchEdgeLocations(a,e.signal),l=d.locations.buffer;return s.push(l),{id:a,uid:m,objectIds:d.objectIds,locations:l,origin:d.origin,type:d.type}})());return{result:{components:(await Promise.all(r)).filter(({id:a})=>this._ids.has(a))},transferList:s}}};i([o({constructOnly:!0})],p.prototype,"renderCoordsHelper",void 0),i([o({constructOnly:!0})],p.prototype,"fetchEdgeLocations",void 0),i([o({constructOnly:!0})],p.prototype,"schedule",void 0),i([o({readOnly:!0})],p.prototype,"availability",void 0),p=i([u("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],p);class j extends O{constructor(e,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:r})}}const P=_();let n=class extends w{get updating(){return this.updatingHandles.updating}constructor(t){super(t),this.availability=1,this._abortController=new AbortController}destroy(){this._tracker=S(this._tracker),this._abortController=f(this._abortController)}initialize(){const{view:t}=this,e=t.resourceController;this._edgeWorker=new E(r=>e.immediate.schedule(r)),this._workerHandle=new p({renderCoordsHelper:this.view.renderCoordsHelper,schedule:r=>e.immediate.schedule(r),fetchEdgeLocations:async(r,s)=>{if(y(this._tracker))throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,s)}}),this.updatingHandles.addPromise(this._setupLayerView()),this.handles.add([g(this._workerHandle),g(this._edgeWorker)])}async fetchCandidates(t,e){return this._workerHandle.fetchCandidates(t,e)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const t=k(this._abortController,r=>r.signal),e=await this.getLayerView();y(e)||b(t)||(this._tracker=e.trackSnappingSources({add:(r,s)=>{this.updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:s},t))},remove:r=>{this.updatingHandles.addPromise(this._workerHandle.remove({id:r},t))}}))}};i([o({constructOnly:!0})],n.prototype,"getLayerView",void 0),i([o({constructOnly:!0})],n.prototype,"view",void 0),i([o({readOnly:!0})],n.prototype,"updating",null),i([o({readOnly:!0})],n.prototype,"availability",void 0),n=i([u("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],n);let c=class extends C{get updating(){return this._i3sSources.some(t=>t.updating)}constructor(t){super(t),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(t=>t.destroy()),this._i3sSources.length=0}initialize(){const{view:t}=this,e=this.layerSource.layer;this._i3sSources=e.type==="building-scene"?this._getBuildingSceneI3SSources(t,e):[this._getSceneLayerI3SSource(t,e)]}async fetchCandidates(t,e){const r=await Promise.all(this._i3sSources.map(s=>s.fetchCandidates(t,e)));return L(e),r.flat()}refresh(){this._i3sSources.forEach(t=>t.refresh())}_getBuildingSceneI3SSources(t,e){return e.allSublayers.toArray().map(r=>r.type==="building-component"?new n({getLayerView:async()=>(await t.whenLayerView(e)).whenSublayerView(r),view:t}):null).filter(H)}_getSceneLayerI3SSource(t,e){return new n({getLayerView:async()=>{const r=await t.whenLayerView(e);return r.type==="scene-layer-graphics-3d"?void 0:r},view:t})}};i([o({constructOnly:!0})],c.prototype,"layerSource",void 0),i([o({constructOnly:!0})],c.prototype,"view",void 0),i([o({readOnly:!0})],c.prototype,"updating",null),i([o({readOnly:!0})],c.prototype,"availability",void 0),c=i([u("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],c);export{c as SceneLayerSnappingSource};
