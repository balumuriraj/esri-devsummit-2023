import{e as o,y as n,n as _,m as O,t as z,c as M,X as T}from"./cast-fcb46737.js";import{d as P,a as R}from"./HandleOwner-9b396af1.js";import{r as d,t as k,o as N,b as x}from"./typedArrayUtil-4d7bb04c.js";import{y as U,f as $}from"./promiseUtils-1e54421e.js";import{l as g,U as F,h as w}from"./reactiveUtils-4dabbb80.js";import"./ArrayPool-a8ee9378.js";import{p as A,t as j}from"./Scheduler-540208b6.js";import{y as D,E as J}from"./elevationInfoUtils-36e5dd0f.js";import{t as H,j as V,p as Z}from"./TileInfo-b0eb8c90.js";import{o as L}from"./vec3-e93e648f.js";import{n as q}from"./vec4f64-e407da96.js";import{bt as G,cl as W,cm as Q,Q as B,cn as X}from"./index-b1b27909.js";import{r as K,a as Y}from"./queryEngineUtils-358d7c9a.js";import{v as tt}from"./Polyline-ff2d7c6b.js";import{f as et,o as it}from"./aaBoundingRect-193543b5.js";import{b as rt}from"./TileTreeDebugger-36d5c9d2.js";import{h as ot}from"./LercDecoder-4c9b29b3.js";import{i as nt}from"./typeUtils-35750739.js";import{w as st}from"./Extent-da876e26.js";import"./string-a318751c.js";import"./Error-ec6249b9.js";import"./nextTick-3ee5a785.js";import"./SimpleObservable-23231131.js";import"./ElevationInfo-215614d8.js";import"./jsonMap-7b8332c9.js";import"./fieldUtils-7f54c4b1.js";import"./preload-helper-3bce6601.js";import"./arcadeOnDemand-281a01eb.js";import"./geometry-b7901087.js";import"./lengthUtils-fa751420.js";import"./unitUtils-45d1147c.js";import"./Ellipsoid-89682c5e.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./Graphic-f0e54e86.js";import"./PopupTemplate-40f3c9aa.js";import"./Clonable-545593ce.js";import"./Collection-910b6f71.js";import"./Evented-a45c8b0f.js";import"./enumeration-3a03bd31.js";import"./number-27cf8195.js";import"./locale-30120714.js";import"./Identifiable-bfe1ff30.js";import"./symbols-f8232671.js";import"./CIMSymbol-539bd447.js";import"./Symbol-f93ed9fd.js";import"./Color-fb64d77d.js";import"./colorUtils-639f4d25.js";import"./mathUtils-b4bb77e2.js";import"./vec4-790471c0.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-1f7f5126.js";import"./symbolLayerUtils3D-76acc268.js";import"./aaBoundingBox-657a9b82.js";import"./request-6fc81c4c.js";import"./persistableUrlUtils-5f719c3b.js";import"./Symbol3DAnchorPosition2D-5726d999.js";import"./collectionUtils-803d9ba8.js";import"./Portal-2bb189b3.js";import"./Loadable-268c900a.js";import"./Promise-376ab9f6.js";import"./PortalGroup-8e41557a.js";import"./PortalUser-659cc1d2.js";import"./jsonUtils-229211af.js";import"./Cyclical-151bcc41.js";import"./CollectionFlattener-8f4d518b.js";import"./workers-6e30d081.js";import"./Connection-9a1cf8da.js";import"./Queue-b7d3cd48.js";import"./assets-8d3e737a.js";import"./intl-65a3e389.js";import"./messages-2289086c.js";import"./projection-290b739f.js";import"./mat4-44a0988f.js";import"./zscale-89472cba.js";import"./widget-fb292a2f.js";import"./uuid-73213768.js";import"./byteSizeEstimations-f0cab514.js";import"./executeQueryJSON-2fe748db.js";import"./normalizeUtils-27e29a72.js";import"./query-694f7287.js";import"./pbfQueryUtils-4adda2cc.js";import"./pbf-0e99a620.js";import"./OptimizedFeature-4ab8d380.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-1481fa99.js";import"./FeatureSet-d32b0eb8.js";import"./Field-61ec9870.js";import"./fieldType-f31285f7.js";import"./Query-b96bcde0.js";import"./TimeExtent-23e282b9.js";import"./RelationshipQuery-0dda77ad.js";import"./LegendOptions-010d0873.js";import"./utils-6786b611.js";import"./asyncUtils-437defc4.js";import"./parser-498c8be0.js";import"./mat4f32-77b3d8ac.js";import"./ItemCache-fd3aceaf.js";import"./MemCache-18a255ed.js";import"./jsonUtils-f5674613.js";import"./UniqueValueRenderer-08f8851c.js";import"./diffUtils-68b89c71.js";import"./colorRamps-9dac42c1.js";import"./sizeVariableUtils-d4870b0d.js";import"./compilerUtils-18d58939.js";import"./jsonUtils-0ff4ff96.js";import"./styleUtils-22b14a8b.js";import"./DictionaryLoader-1cbfea53.js";import"./LRUCache-64ec42ee.js";import"./deprecate-035b199e.js";import"./heatmapUtils-aaea3f32.js";import"./featureConversionUtils-03a03f40.js";import"./TopFeaturesQuery-cad97c37.js";import"./FeatureLayer-041050b6.js";import"./MultiOriginJSONSupport-aae3bc0c.js";import"./LayerFloorInfo-54b916a2.js";import"./FeatureLayerBase-ad5cfa1a.js";import"./HeightModelInfo-5d01231e.js";import"./arcgisLayerUrl-c09f09b4.js";import"./OperationalLayer-97084f13.js";import"./Layer-5ffe0eda.js";import"./editsZScale-6a661299.js";import"./APIKeyMixin-a0a8917a.js";import"./ArcGISService-21dc1d06.js";import"./BlendLayer-20d0571b.js";import"./CustomParametersMixin-47aab0a6.js";import"./EditBusLayer-e750b15b.js";import"./FeatureReductionLayer-d69dae71.js";import"./labelingInfo-607e66b8.js";import"./labelUtils-3108e8d7.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-af7a6030.js";import"./PortalLayer-b2643f87.js";import"./PortalItem-bb7e98a6.js";import"./RefreshableLayer-7f154951.js";import"./ScaleRangeLayer-4be07229.js";import"./TemporalLayer-61549309.js";import"./TimeInfo-1d30dc7c.js";import"./FeatureTemplate-c1d0bb70.js";import"./FeatureType-34d71ade.js";import"./fieldProperties-e2eeb1d5.js";import"./FieldsIndex-f104cc5f.js";import"./versionUtils-fd91f55f.js";import"./styleUtils-a989c0af.js";import"./popupUtils-86dc6b94.js";import"./mat2d-2bbb5feb.js";import"./Basemap-af7f62f8.js";import"./loadAll-b5bfa7ab.js";import"./writeUtils-e686bd33.js";import"./layerUtils-f4d08f94.js";import"./TablesMixin-bc97d131.js";import"./GraphicsCollection-c37a9ffd.js";import"./ViewingMode-5d7d590b.js";import"./enums-0fc02184.js";import"./vec2-528adfe4.js";import"./vec2f64-30dc1443.js";import"./mat3-3fc68e72.js";import"./mat3f32-d3d088e8.js";import"./vec2f32-461e65a9.js";import"./TileStrategy-a90cd1af.js";import"./TileStore-00ac650f.js";import"./TileKey-5aef17b6.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./capabilities-302cf20d.js";import"./context-util-a4ce3a7b.js";import"./BoundsStore-b9fa27cc.js";import"./PooledRBush-3e149119.js";import"./mat3f64-c6305894.js";import"./sphere-2af0d852.js";import"./mat4f64-1e28eae0.js";import"./quatf64-7fd38d64.js";import"./lineSegment-10422ca0.js";import"./plane-b575face.js";import"./scaleUtils-93ad8d0c.js";import"./ElevationSamplerData-b87e0e50.js";import"./PhysicallyBasedRendering.glsl-d457fff5.js";import"./View.glsl-3ce196d4.js";import"./ShaderBuilder-a7d0da4e.js";import"./FloatPassUniform-68d54f51.js";import"./Float4PassUniform-d7bdbc81.js";import"./RgbaFloatEncoding.glsl-52af7fcf.js";import"./Texture2DPassUniform-753de459.js";import"./vec3f32-c9aa289f.js";import"./VertexAttribute-9c5c630d.js";import"./Texture2DDrawUniform-053796dc.js";import"./basicInterfaces-19ed850e.js";import"./PiUtils.glsl-db6418ee.js";import"./ReadLinearDepth.glsl-9c87a54a.js";import"./WaterSurface.glsl-c64cb8f1.js";import"./ForwardLinearDepth.glsl-56affafd.js";import"./Matrix3PassUniform-ad9f953b.js";import"./Slice.glsl-3b39b1f7.js";import"./Transform.glsl-6d2e2fd9.js";import"./OutputHighlight.glsl-fbac199a.js";import"./MultipassTerrainTest.glsl-bb236672.js";import"./NormalUtils.glsl-c12729bf.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-a11868d2.js";import"./EvaluateSceneLighting.glsl-189abc15.js";import"./VisualVariablePassParameters-d460182b.js";import"./enums-64ab819c.js";import"./VertexElementDescriptor-2925c6af.js";import"./FramebufferObject-a3b9c52c.js";import"./Texture-243be4d7.js";import"./Util-a48361c6.js";import"./SSAOBlur.glsl-8bf33b65.js";import"./ScreenSpacePass-d5e48a9b.js";import"./SSAO.glsl-980b3771.js";import"./ShaderTechniqueConfiguration-9f5b4555.js";import"./HUD.glsl-d3a072ad.js";import"./VerticalOffset.glsl-87cbb2e3.js";import"./objectResourceUtils-d556a033.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-903d1848.js";import"./vec33-e98769e8.js";import"./DefaultMaterial_COLOR_GAMMA-fe26fda8.js";import"./types-e1c0a5bf.js";import"./Version-2946cc03.js";import"./quat-3d5eec2d.js";import"./Texture-46c8c2cb.js";import"./TextureOnly.glsl-1ec9a9ef.js";import"./InterleavedLayout-984d67b2.js";import"./MixExternalColor.glsl-ab0706f7.js";import"./symbolColorUtils-b2b55883.js";import"./ObjectAndLayerIdColor.glsl-ad468647.js";import"./OutputDepth.glsl-470c8e2a.js";import"./VisualVariables.glsl-2b937327.js";import"./DiscardOrAdjustAlphaBlend.glsl-73258f38.js";import"./Normals.glsl-76f97814.js";import"./DefaultMaterial.glsl-885671b3.js";import"./VertexColor.glsl-8c022fa8.js";import"./DefaultTechniqueConfiguration-588e5ab2.js";import"./RealisticTree.glsl-b6cc03f2.js";import"./edgeProcessing-f733ce76.js";import"./deduplicate-03981d62.js";import"./projection-a69d43d0.js";import"./Octree-0a267ea2.js";import"./HUDMaterial.glsl-32cf019c.js";import"./sdfPrimitives-9858c36d.js";import"./floatRGBA-9ad35d39.js";import"./dehydratedFeatures-0557137d.js";import"./quantizationUtils-4dd81f85.js";import"./labelFormatUtils-d25d1d9e.js";import"./I3SUtil-f31a4571.js";import"./I3SBinaryReader-f4829435.js";import"./LineCallout.glsl-358ef89b.js";import"./earcut-58237617.js";import"./SnappingCandidate-970faec6.js";import"./MeshComponent-a43522cc.js";import"./MarkerSizing.glsl-566261cc.js";import"./RibbonLine.glsl-0f7c2bbc.js";import"./LineStipple.glsl-ed22a88b.js";import"./callExpressionWithFeature-55effb7b.js";import"./LineMarker.glsl-8166d610.js";import"./NativeLine.glsl-742e9e29.js";import"./Path.glsl-9f6bab44.js";import"./ColorMaterial.glsl-3a70e4a7.js";import"./Pattern.glsl-67f4595b.js";import"./DefaultVertexAttributeLayouts-2bcf3941.js";import"./config-1337d16e.js";import"./workerHelper-e756ac3a.js";import"./originUtils-1469eeaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./portalItemUtils-2ccd793f.js";import"./DimensionAnalysisView3D-47bd9283.js";import"./LineVisualElement-e2a10a7f.js";import"./LengthDimension-6eb29622.js";import"./Segment-2d1473e7.js";import"./analysisViewUtils-a0e9b6eb.js";import"./ImageMaterial-b657ed0d.js";import"./ImageMaterial.glsl-befce2a1.js";import"./Factory-6f72a6b1.js";import"./PointVisualElement-ae0e6824.js";import"./RightAngleQuadVisualElement-9ae3bac9.js";import"./colorUtils-0c057879.js";import"./EditGeometryOperations-464d8964.js";import"./QueryEngineResult-8f90b8dc.js";import"./WhereClause-d4b8b019.js";import"./utils-b34fcd9d.js";import"./generateRendererUtils-7252b5e6.js";import"./projectionSupport-aa5eaa0d.js";import"./json-48e3ea08.js";import"./utils-511aa5f5.js";import"./dehydratedFeatureComparison-59868945.js";import"./RenderTexture-a15e38d0.js";import"./VertexSnappingCandidate-85d17ec8.js";function S(t,e){return W(e.extent,C),Q(C,L(at,t.x,t.y,0))}const C=G(),at=q();let h=class extends O{constructor(e){super(e),this.pointOfInterest=null}get tiles(){const e=this.tilesCoveringView,r=d(this.pointOfInterest)?this.pointOfInterest:this.view.center;return e.sort((a,i)=>S(r,a)-S(r,i)),e}_scaleEnabled(){return B(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||k(this.tileInfo))return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:r}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:a}=r,i=[];for(const{row:s,colFrom:p,colTo:l}of e)for(let v=p;v<=l;v++){const y=r.normalizeCol(v),I=new H(null,a,s,y);this.tileInfo.updateTileInfo(I),i.push(I)}return i}get tileInfo(){var e;return((e=this.view.featuresTilingScheme)==null?void 0:e.tileInfo)??null}get tileSize(){return d(this.tileInfo)?this.tileInfo.size[0]:256}initialize(){this.addHandles(g(()=>{var e,r;return(r=(e=this.view)==null?void 0:e.state)==null?void 0:r.viewpoint},()=>this.notifyChange("tilesCoveringView"),F))}};o([n({readOnly:!0})],h.prototype,"tiles",null),o([n({readOnly:!0})],h.prototype,"_scaleEnabled",null),o([n({readOnly:!0})],h.prototype,"tilesCoveringView",null),o([n({readOnly:!0})],h.prototype,"tileInfo",null),o([n({readOnly:!0})],h.prototype,"tileSize",null),o([n({constructOnly:!0})],h.prototype,"view",void 0),o([n({constructOnly:!0})],h.prototype,"layer",void 0),o([n()],h.prototype,"pointOfInterest",void 0),h=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],h);let c=class extends P{constructor(t){super(t),this.pointOfInterest=null}get tiles(){const t=this.tilesCoveringView,e=this._effectivePointOfInterest;if(d(e)){const r=t.map(a=>S(e,a));for(let a=1;a<r.length;a++)if(r[a-1]>r[a])return t.sort((i,s)=>S(e,i)-S(e,s)),t.slice()}return t}get tilesCoveringView(){var t,e;return this._filterTiles((e=(t=this.view.featureTiles)==null?void 0:t.tiles)==null?void 0:e.toArray()).map(pt)}get tileInfo(){var t;return((t=this.view.featureTiles)==null?void 0:t.tilingScheme.toTileInfo())??null}get tileSize(){var t;return((t=this.view.featureTiles)==null?void 0:t.tileSize)??256}get _effectivePointOfInterest(){var e;const t=this.pointOfInterest;return d(t)?t:(e=this.view.pointsOfInterest)==null?void 0:e.focus.location}initialize(){this.handles.add(g(()=>this.view.featureTiles,t=>{this.handles.remove(E),t&&this.handles.add(t.addClient(),E)},w))}_filterTiles(t){return k(t)?[]:t.filter(e=>Math.abs(e.measures.screenRect[3]-e.measures.screenRect[1])>lt&&e.measures.visibility===X.VISIBLE_ON_SURFACE)}};function pt({lij:[t,e,r],extent:a}){return new H(`${t}/${e}/${r}`,t,e,r,a)}o([n({readOnly:!0})],c.prototype,"tiles",null),o([n({readOnly:!0})],c.prototype,"tilesCoveringView",null),o([n({readOnly:!0})],c.prototype,"tileInfo",null),o([n({readOnly:!0})],c.prototype,"tileSize",null),o([n({constructOnly:!0})],c.prototype,"view",void 0),o([n()],c.prototype,"pointOfInterest",void 0),o([n()],c.prototype,"_effectivePointOfInterest",null),c=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],c);const lt=50,E="feature-tiles";let b=class extends rt{constructor(t){super(t),this._handles=new z}initialize(){const t=setInterval(()=>this._fetchDebugInfo(),2e3);this._handles.add(M(()=>clearInterval(t)))}destroy(){this._handles.destroy()}getTiles(){if(!this._debugInfo)return[];const t=new Map,e=new Map;this._debugInfo.storedTiles.forEach(i=>{t.set(i.data.id,i.featureCount)}),this._debugInfo.pendingTiles.forEach(i=>{t.set(i.data.id,i.featureCount),e.set(i.data.id,i.state)});const r=i=>{const s=e.get(i),p=t.get(i)??"?";return s?`${s}:${p}
${i}`:`store:${p}
${i}`},a=new Map;return this._debugInfo.storedTiles.forEach(i=>{a.set(i.data.id,i.data)}),this._debugInfo.pendingTiles.forEach(i=>{a.set(i.data.id,i.data)}),Array.from(a.values()).map(i=>({lij:[i.level,i.row,i.col],geometry:tt.fromExtent(et(i.extent,this.view.spatialReference)),label:r(i.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(t=>{this._debugInfo=t,this.update()})}};o([n({constructOnly:!0})],b.prototype,"handle",void 0),b=o([_("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],b);let m=class extends P{constructor(t){super(t),this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async e=>{const r=[];for(const{points:a}of e)for(const{z:i}of a)r.push(i);return{elevations:r,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this._editId=0}get updating(){return this.updatingHandles.updating||this._workerHandleUpdating}destroy(){this._workerHandle.destroy()}initialize(){this._workerHandle=new mt(this.schedule,{alignElevation:async(t,{signal:e})=>({result:await this.elevationAlignPointsInFeatures(t.points,e)}),getSymbologyCandidates:async(t,{signal:e})=>({result:await this.queryForSymbologySnapping(t,e)})}),this.handles.add([this._workerHandle.on("notify-updating",({updating:t})=>this._workerHandleUpdating=t),this._workerHandle.on("notify-availability",({availability:t})=>this._set("availability",t))])}async setup(t,e){var i;const r=this._serviceInfoFromLayer(t.layer);if(k(r))return;const a={configuration:this._convertConfiguration(t.configuration),serviceInfo:r,spatialReference:t.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:(i=t.layer.elevationInfo)==null?void 0:i.toJSON()};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",a,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async configure(t,e){const r=this._convertConfiguration(t);await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",r,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async refresh(t){await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async fetchCandidates(t,e){const r={distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,filter:d(t.filter)?t.filter.toJSON():null};return this._workerHandle.invoke(r,e)}async updateTiles(t,e){const r={tiles:t.tiles,tileInfo:d(t.tileInfo)?t.tileInfo.toJSON():null,tileSize:t.tileSize};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",r,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async applyEdits(t,e){var p,l,v;const r=this._editId++,a={id:r};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",a,e));const i=await this.updatingHandles.addPromise(U(t.result,e)),s={id:r,edits:{addedFeatures:((p=i.addedFeatures)==null?void 0:p.map(({objectId:y})=>y).filter(d))??[],deletedFeatures:((l=i.deletedFeatures)==null?void 0:l.map(({objectId:y,globalId:I})=>({objectId:y,globalId:I})))??[],updatedFeatures:((v=i.updatedFeatures)==null?void 0:v.map(({objectId:y})=>y).filter(d))??[]}};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",s,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}getDebugInfo(t){return this._workerHandle.invokeMethod("getDebugInfo",{},t)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(t){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",t)}_convertConfiguration(t){return{filter:d(t.filter)?t.filter.toJSON():null,customParameters:t.customParameters,viewType:t.viewType}}_serviceInfoFromLayer(t){var e,r;return t.geometryType==="multipatch"||t.geometryType==="mesh"?null:{url:((e=t.parsedUrl)==null?void 0:e.path)??"",fields:t.fields.map(a=>a.toJSON()),geometryType:nt.toJSON(t.geometryType),capabilities:t.capabilities,objectIdField:t.objectIdField,globalIdField:t.globalIdField,spatialReference:t.spatialReference.toJSON(),timeInfo:(r=t.timeInfo)==null?void 0:r.toJSON()}}};o([n({constructOnly:!0})],m.prototype,"schedule",void 0),o([n({constructOnly:!0})],m.prototype,"hasZ",void 0),o([n({constructOnly:!0})],m.prototype,"elevationAlignPointsInFeatures",void 0),o([n({constructOnly:!0})],m.prototype,"queryForSymbologySnapping",void 0),o([n({readOnly:!0})],m.prototype,"updating",null),o([n({readOnly:!0})],m.prototype,"availability",void 0),o([n()],m.prototype,"_workerHandleUpdating",void 0),m=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],m);class mt extends ot{constructor(e,r){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:r})}}let f=class extends O{constructor(t){super(t),this.pointOfInterest=null}get tiles(){return[new H("0/0/0",0,0,0,it(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new V({origin:new st({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new Z({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}};o([n({readOnly:!0})],f.prototype,"tiles",null),o([n({readOnly:!0})],f.prototype,"tileInfo",null),o([n({readOnly:!0})],f.prototype,"tileSize",null),o([n({constructOnly:!0})],f.prototype,"layer",void 0),o([n()],f.prototype,"pointOfInterest",void 0),f=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],f);let u=class extends R(O){constructor(t){super(t)}get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){return this._workerHandle.updating||this.updatingHandles.updating}get configuration(){const{view:t}=this,e=d(t)?t.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:e}}get availability(){return this._workerHandle.availability}get _layer(){return this.layerSource.layer}initialize(){const t=this.view;if(d(t))switch(t.type){case"2d":this._tilesOfInterest=new h({view:t,layer:this._layer}),this._workerHandle=new m;break;case"3d":{const{resourceController:e}=t,r=this._layer,a=t.whenLayerView(r);this._tilesOfInterest=new c({view:t}),this._workerHandle=new m({schedule:s=>e.schedule(s),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(s,p)=>{const l=await a;return $(p),l.elevationAlignPointsInFeatures(s,p)},queryForSymbologySnapping:async(s,p)=>{const l=await a;return $(p),l.queryForSymbologySnapping(s,p)}});const i=new j(null);a.then(s=>i.set(s)),this.addHandles([t.elevationProvider.on("elevation-change",({context:s})=>{var l;const{elevationInfo:p}=r;D(s,p)&&((l=this._workerHandle)==null||l.notifyElevationSourceChange())}),g(()=>r.elevationInfo,()=>{var s;return(s=this._workerHandle)==null?void 0:s.notifyElevationSourceChange()},w),g(()=>N(i.get(),({processor:s})=>s==null?void 0:s.renderer),()=>{var s;return(s=this._workerHandle)==null?void 0:s.notifySymbologyChange()},w),g(()=>x(i.get(),!1,s=>s.symbologySnappingSupported),s=>{var p;return(p=this._workerHandle)==null?void 0:p.setSymbologySnappingSupported(s)},w)]);break}}else this._tilesOfInterest=new f({layer:this._layer}),this._workerHandle=new m;this.handles.add([T(this._workerHandle)]),this._workerHandle.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null),this.updatingHandles.add(()=>this._updateTilesParameters,()=>this._workerHandle.updateTiles(this._updateTilesParameters,null),w),this.handles.add([g(()=>this.configuration,e=>this._workerHandle.configure(e,null),F)]),d(t)&&this.handles.add(g(()=>A.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,e=>{e&&!this._debug?(this._debug=new b({view:t,handle:this._workerHandle}),this.handles.add(T(this._debug),"debug")):!e&&this._debug&&this.handles.remove("debug")},w)),this.handles.add(this.layerSource.layer.on("apply-edits",e=>{this._workerHandle.applyEdits(e,null)}))}refresh(){this._workerHandle.refresh(null)}async fetchCandidates(t,e){const{coordinateHelper:r,elevationInfo:a,point:i}=t;this._tilesOfInterest.pointOfInterest=r.vectorToPoint(i);const s=r.hasZ()?J:a,p=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...t},e)).candidates.map(l=>K(l,r,s,p))}getDebugInfo(t){return this._workerHandle.getDebugInfo(t)}get _getGroundElevation(){return Y(this.view)}};o([n({constructOnly:!0})],u.prototype,"spatialReference",void 0),o([n({constructOnly:!0})],u.prototype,"layerSource",void 0),o([n({constructOnly:!0})],u.prototype,"view",void 0),o([n()],u.prototype,"_tilesOfInterest",void 0),o([n({readOnly:!0})],u.prototype,"_updateTilesParameters",null),o([n({readOnly:!0})],u.prototype,"updating",null),o([n({readOnly:!0})],u.prototype,"configuration",null),o([n({readOnly:!0})],u.prototype,"availability",null),o([n()],u.prototype,"_getGroundElevation",null),u=o([_("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],u);export{u as FeatureServiceSnappingSource};
