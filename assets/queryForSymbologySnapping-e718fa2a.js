import{i$ as D,bl as z,fy as C,fz as q,e as R,v as I,lu as F,jN as G,lv as O,r as E,fW as P}from"./index-51930907.js";import{a as W}from"./elevationInfoUtils-5a8f681c.js";async function H(s,d,p,f,r){const{elevationProvider:g,renderCoordsHelper:c,spatialReference:b}=s,{elevationInfo:y}=d,m=C(y,!0),v=await q(m,b,r);R(r);const i=[],l=new Set,u=new Set;for(const{objectId:e,points:a}of f){const n=p(e);if(I(n)){for(const o of a)i.push(o[2]);l.add(e);continue}n.isDraped&&u.add(e);const t=n.graphic.geometry;w.setFromElevationInfo(W(t,y)),w.updateFeatureExpressionInfoContext(v,n.graphic,d),h.spatialReference=s.spatialReference;for(const{x:o,y:$,z:x}of a)h.x=o,h.y=$,h.z=x??0,F(h,g,w,c,S),i.push(S.z)}return{elevations:i,drapedObjectIds:u,failedObjectIds:l}}const w=new G,h=D(0,0,0,z.WGS84),S=new O;async function M(s,d,p){if(I(s)||d.candidates.length===0)return j;const f=s.graphics3DGraphicsByObjectID??s.graphics3DGraphics,r=[],g=[],{renderer:c}=s,b=E(c)&&"arcadeRequired"in c&&c.arcadeRequired?P():null,y=async(e,{graphic:a,graphics3DSymbol:n})=>{const t=await b,o=await s.getRenderingInfoAsync(a,c,t,{signal:p});return I(o)?[]:n.queryForSnapping(e,v,o,p)},{candidates:m,spatialReference:v}=d;for(let e=0;e<m.length;++e){const a=m[e],{objectId:n}=a,t=typeof n=="number"?f==null?void 0:f.get(n):void 0;if(I(t))continue;const{graphics3DSymbol:o}=t;o.symbologySnappingSupported&&(r.push(y(a,t)),g.push(e))}if(r.length===0)return j;const i=await Promise.all(r);R(p);const l=[],u=[];for(let e=0;e<i.length;++e){const a=i[e],n=g[e];for(const t of a)l.push(t),u.push(n)}return{candidates:l,sourceCandidateIndices:u}}const j={candidates:[],sourceCandidateIndices:[]};export{M as a,H as m};
