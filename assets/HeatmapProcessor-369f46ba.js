import{e as _,n as F}from"./cast-fcb46737.js";import"./string-a318751c.js";import{r as S,o as f}from"./typedArrayUtil-4d7bb04c.js";import"./Error-ec6249b9.js";import"./ArrayPool-a8ee9378.js";import{m as U}from"./diffUtils-68b89c71.js";import{s as v}from"./heatmapUtils-aaea3f32.js";import{Q as E}from"./enums-2658a65c.js";import{p as O}from"./BaseProcessor-78645e25.js";import{l as a}from"./tileUtils-55e656c2.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-1e54421e.js";import"./Collection-910b6f71.js";import"./Evented-a45c8b0f.js";import"./SimpleObservable-23231131.js";import"./mathUtils-b4bb77e2.js";import"./vec3-e93e648f.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./vec4-790471c0.js";import"./screenUtils-410d12c0.js";import"./vec4f64-e407da96.js";import"./HandleOwner-9b396af1.js";import"./reactiveUtils-4dabbb80.js";import"./Extent-da876e26.js";import"./Ellipsoid-89682c5e.js";import"./Query-b96bcde0.js";import"./geometry-b7901087.js";import"./Polyline-ff2d7c6b.js";import"./typeUtils-35750739.js";import"./jsonMap-7b8332c9.js";import"./TimeExtent-23e282b9.js";import"./enumeration-3a03bd31.js";import"./jsonUtils-229211af.js";import"./Field-61ec9870.js";import"./fieldType-f31285f7.js";import"./Clonable-545593ce.js";import"./TileKey-5aef17b6.js";class n{constructor(t,r){this.offset=t,this.extent=r}}function g(i){const t=i.key,r=new Map,o=256,e=E,s=i.tileInfoView.tileInfo.isWrappable;return r.set(a(t,-1,-1,s).id,new n([-e,-e],[e-o,e-o,e,e])),r.set(a(t,0,-1,s).id,new n([0,-e],[0,e-o,e,e])),r.set(a(t,1,-1,s).id,new n([e,-e],[0,e-o,o,e])),r.set(a(t,-1,0,s).id,new n([-e,0],[e-o,0,e,e])),r.set(a(t,1,0,s).id,new n([e,0],[0,0,o,e])),r.set(a(t,-1,1,s).id,new n([-e,e],[e-o,0,e,o])),r.set(a(t,0,1,s).id,new n([0,e],[0,0,e,o])),r.set(a(t,1,1,s).id,new n([e,e],[0,0,o,o])),r}let l=class extends O{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(i,t){const r=t.schema.processors[0];r.type==="heatmap"&&U(this._schema,r)&&(i.mesh=!0,this._schema=r)}onTileUpdate(i){for(const t of i.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(i){const t={clear:!0};return this._tileKeyToFeatureSets.delete(i.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:i.id,data:t})}async onTileMessage(i,t,r){this._tileKeyToFeatureSets.has(i.key.id)||this._tileKeyToFeatureSets.set(i.key.id,new Map);const o=this._tileKeyToFeatureSets.get(i.key.id);if(S(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&o.set(t.addOrUpdate.instance,t),t.end){const e=[],s=g(i);this._tileKeyToFeatureSets.forEach((c,p)=>{if(p===i.key.id)c.forEach(m=>f(m.addOrUpdate,d=>e.push(d)));else if(s.has(p)){const m=s.get(p),[d,T]=m.offset;c.forEach(w=>f(w.addOrUpdate,k=>{const K=k.transform(d,T,1,1);e.push(K)}))}});const h=v(e,this._schema.mesh,512,512),u={tileKey:i.key.id,intensityInfo:h},y=[h.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",u,{...r,transferList:y})}}onTileError(i,t,r){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:i.id,error:t},r)}};l=_([F("esri.views.2d.layers.features.processors.HeatmapProcessor")],l);const ce=l;export{ce as default};
