import{ap as S,ak as b,a3 as M,a1 as q,aR as U,ac as h,ad as x,af as I}from"./index-45303bea.js";import{a as w}from"./BitmapContainer-1e67b231.js";import{f as E}from"./LayerView2D-770d26fa.js";import{v as H}from"./ExportStrategy-fad5f4ef.js";import{u as W}from"./LayerView-c85352ba.js";import{i as A}from"./RefreshableLayerView-5edb9496.js";import{i as F}from"./WMSLayerView-8452c06a.js";import"./WGLContainer-4f657f13.js";import"./definitions-3ddd14a8.js";import"./WGLBrushVTLSymbol-0ab02471.js";import"./enums-b1d611e3.js";import"./number-b10bd8f5.js";import"./StyleDefinition-7d58136b.js";import"./enums-4b2a86a0.js";import"./GeometryUtils-dd03fc25.js";import"./color-850afe85.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-06963f45.js";import"./MaterialKey-4072508e.js";import"./alignmentUtils-ae955d28.js";import"./utils-b82e4058.js";import"./heatmapTextureUtils-e499cbb5.js";import"./Container-6ee37e21.js";import"./Bitmap-87685936.js";import"./ExportWMSImageParameters-dfe282c6.js";let s=class extends F(A(E(W))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch(e=>{S(e)||b.getLogger(this.declaredClass).error(e)})}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:a}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new H({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:a,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(M(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:a}=this,{x:r,y:o}=t,{spatialReference:v}=e;let i,p=0,d=0;if(a.children.some(R=>{const{width:c,height:g,resolution:l,x:m,y:n}=R,y=m+l*c,f=n-l*g;return r>=m&&r<=y&&o<=n&&o>=f&&(i=new U({xmin:m,ymin:f,xmax:y,ymax:n,spatialReference:v}),p=c,d=g,!0)}),!i)return null;const u=i.width/p,C=Math.round((r-i.xmin)/u),$=Math.round((i.ymax-o)/u);return{extent:i,width:p,height:d,x:C,y:$}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,a,r){return this.layer.fetchImageBitmap(t,e,a,{timeExtent:this.timeExtent,...r})}};h([x()],s.prototype,"strategy",void 0),h([x()],s.prototype,"updating",void 0),s=h([I("esri.views.2d.layers.WMSLayerView2D")],s);const ot=s;export{ot as default};
