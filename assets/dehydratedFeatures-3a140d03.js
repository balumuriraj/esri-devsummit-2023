import{R as m,bW as y,jg as u,de as f,jh as g,G as b,ji as d,dm as x,$ as h,jj as l,cB as Z,jk as p}from"./calcite-8912bd40.js";import{C as M,B as k,q as j,v as N}from"./quantizationUtils-b3b2ae2a.js";class w{constructor(e,s,n){this.uid=e,this.geometry=s,this.attributes=n,this.visible=!0,this.objectId=null,this.centroid=null}}function A(t){return m(t.geometry)}class T{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function $(t){var o;const e=g.fromJSON(t.geometryType),s=b.fromJSON(t.spatialReference),n=t.transform,i=t.features.map(c=>{const r=v(c,e,s,t.objectIdFieldName),a=r.geometry;if(m(a)&&n)switch(a.type){case"point":r.geometry=N(n,a,a,a.hasZ,a.hasM);break;case"multipoint":r.geometry=j(n,a,a,!!a.hasZ,!!a.hasM);break;case"polygon":r.geometry=k(n,a,a,!!a.hasZ,!!a.hasM);break;case"polyline":r.geometry=M(n,a,a,!!a.hasZ,!!a.hasM);break;case"extent":case"mesh":r.geometry=a}return r});return{geometryType:e,features:i,spatialReference:s,fields:((o=t.fields)==null?void 0:o.map(c=>d.fromJSON(c)))??[],objectIdFieldName:t.objectIdFieldName,globalIdFieldName:t.globalIdFieldName,geohashFieldName:t.geohashFieldName,geometryProperties:t.geometryProperties,hasZ:t.hasZ,hasM:t.hasM,exceededTransferLimit:t.exceededTransferLimit,transform:null}}function v(t,e,s,n){return{uid:x(),objectId:n&&t.attributes?t.attributes[n]:null,attributes:t.attributes,geometry:I(t.geometry,e,s),visible:!0}}function I(t,e,s){if(h(t))return null;switch(e){case"point":{const n=t;return{x:n.x,y:n.y,z:n.z,m:n.m,hasZ:n.z!=null,hasM:n.m!=null,type:"point",spatialReference:s}}case"polyline":{const n=t;return{paths:n.paths,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"polyline",spatialReference:s}}case"polygon":{const n=t;return{rings:n.rings,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"polygon",spatialReference:s}}case"multipoint":{const n=t;return{points:n.points,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"multipoint",spatialReference:s}}}}function S(t,e,s,n){return{x:t,y:e,z:s,hasZ:s!=null,hasM:!1,spatialReference:n,type:"point"}}function F(t){if(h(t))return 0;let e=32;switch(t.type){case"point":e+=42;break;case"polyline":case"polygon":{let s=0;const n=2+(t.hasZ?1:0)+(t.hasM?1:0),i=t.type==="polyline"?t.paths:t.rings;for(const o of i)s+=o.length;e+=8*s*n+64,e+=128*s,e+=34,e+=32*(i.length+1);break}case"multipoint":{const s=2+(t.hasZ?1:0)+(t.hasM?1:0),n=t.points.length;e+=8*n*s+64,e+=128*n,e+=34,e+=32;break}case"extent":e+=98,t.hasM&&(e+=32),t.hasZ&&(e+=32);break;case"mesh":e+=l(t.vertexAttributes.position),e+=l(t.vertexAttributes.normal),e+=l(t.vertexAttributes.uv),e+=l(t.vertexAttributes.tangent)}return e}function J(t){let e=32;return e+=f(t.attributes),e+=3,e+=8+F(t.geometry),e}function L(t){if(h(t))return 0;switch(t.type){case"point":return 1;case"polyline":{let e=0;for(const s of t.paths)e+=s.length;return e}case"polygon":{let e=0;for(const s of t.rings)e+=s.length;return e}case"multipoint":return t.points.length;case"extent":return 2;case"mesh":{const e=t.vertexAttributes&&t.vertexAttributes.position;return e?e.length/3:0}default:return}}function O(t){if(h(t))return!1;switch(t.type){case"extent":case"point":return!0;case"polyline":for(const e of t.paths)if(e.length>0)return!0;return!1;case"polygon":for(const e of t.rings)if(e.length>0)return!0;return!1;case"multipoint":return t.points.length>0;case"mesh":return!t.loaded||t.vertexAttributes.position.length>0}}function P(t,e){switch(y(e),t.type==="mesh"&&(t=t.extent),t.type){case"point":e[0]=e[3]=t.x,e[1]=e[4]=t.y,t.hasZ&&(e[2]=e[5]=t.z);break;case"polyline":for(let s=0;s<t.paths.length;s++)u(e,t.paths[s],!!t.hasZ);break;case"polygon":for(let s=0;s<t.rings.length;s++)u(e,t.rings[s],!!t.hasZ);break;case"multipoint":u(e,t.points,!!t.hasZ);break;case"extent":e[0]=t.xmin,e[1]=t.ymin,e[3]=t.xmax,e[4]=t.ymax,t.zmin!=null&&(e[2]=t.zmin),t.zmax!=null&&(e[5]=t.zmax)}}function B(t,e){switch(Z(e),t.type==="mesh"&&(t=t.extent),t.type){case"point":e[0]=e[2]=t.x,e[1]=e[3]=t.y;break;case"polyline":for(let s=0;s<t.paths.length;s++)p(e,t.paths[s]);break;case"polygon":for(let s=0;s<t.rings.length;s++)p(e,t.rings[s]);break;case"multipoint":p(e,t.points);break;case"extent":e[0]=t.xmin,e[1]=t.ymin,e[2]=t.xmax,e[3]=t.ymax}}function q(t,e){return t.objectId!=null?t.objectId:t.attributes&&e?t.attributes[e]:null}export{O as F,P as I,S as M,J as N,q as R,A as b,T as d,w as g,B as v,$ as x,L as z};
