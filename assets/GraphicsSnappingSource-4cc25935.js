import{bW as w,ah as b,r as d,a4 as g,a3 as k,bt as E,im as F,e as c,N as C,v as h,a6 as A,dn as $,ae as G,kP as m,fS as P,bi as R,cA as x,e2 as I,fa as O,kn as H,ac as n,ad as l,af as Z,ds as z,j1 as L}from"./index-738d935d.js";import{g as M}from"./FeatureStore-42c9ec6f.js";import{e as W}from"./QueryEngine-b565a77e.js";import{y as j}from"./elevationInfoUtils-72729690.js";import{d as q,b as T}from"./DimensionAnalysisView3D-75d90b60.js";import{i as B,p as D}from"./queryEngineUtils-1336c912.js";import{r as _,a as J,n as f}from"./symbologySnappingCandidates-41134696.js";import"./optimizedFeatureQueryEngineAdapter-4dc0036f.js";import"./centroid-f5daa837.js";import"./utils-61f08010.js";import"./projectionSupport-d70ac199.js";import"./json-48e3ea08.js";import"./QueryEngineResult-2c28eebf.js";import"./WhereClause-f6ddfb88.js";import"./executionError-fb3f283a.js";import"./utils-ebf21391.js";import"./generateRendererUtils-bf5214e6.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-d6519503.js";import"./LineVisualElement-eb1212d1.js";import"./LengthDimension-b57c4171.js";import"./Segment-07c7d5fd.js";import"./analysisViewUtils-5cccbc1a.js";import"./ImageMaterial-97418884.js";import"./Factory-42e09b62.js";import"./RightAngleQuadVisualElement-25f1aa0a.js";import"./VisualElementResources-2a16a5db.js";import"./PointVisualElement-82e2261f.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-09a46b09.js";import"./dehydratedFeatureComparison-4f346faa.js";import"./RenderTexture-76842063.js";import"./VertexSnappingCandidate-cb5c6d8a.js";const v="graphics-collections";let a=class extends w(b){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d";if(!i||t.type==="map-notes")return _();const s=async(r,o)=>(await z(e.whenLayerView(t),o)).elevationAlignPointsInFeatures(r,o);return _(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return J(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?f(s,async(r,o)=>{const p=await e.whenLayerView(t);return c(o),p.queryForSymbologySnapping({candidates:r,spatialReference:e.spatialReference},o)}):f()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(v);for(const s of i)this._addMany(s.graphics.toArray()),this.handles.add([s.on("graphic-update",r=>this._onGraphicUpdate(r)),this.updatingHandles.addOnCollectionChange(()=>s.graphics,r=>this._onGraphicsChanged(r))],v)},g);const{view:e}=this,{layer:t}=this.layerSource;d(e)&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{j(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),k(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),g),E(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,s=await F(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));c(t);const r=this._getGroundElevation,o=s.flat().map(p=>B(p,r));return q(i,o),o}get _getGroundElevation(){return D(this.view)}async _fetchCandidatesForSource(e,t,i){var y;const s=T(t,((y=C(this.view))==null?void 0:y.type)??"2d"),r=await e.queryEngine.executeQueryForSnapping(s,i);c(i);const o=await this._snappingElevationAligner.alignCandidates(r.candidates,i);c(i);const p=await this._symbologySnappingFetcher.fetch(o,i);c(i);const S=p.length===0?o:[...o,...p];return this._snappingElevationFilter.filter(s,S)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)h(s.geometry)||(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=A(async o=>{await $(e.map(p=>({source:p,dest:this.spatialReference})),{signal:o}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},r=()=>L(this._pendingAdds,s);i.promise.then(r,r),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(h(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=G.fromExtent(t));const i=this._ensureSource(t.type);if(h(i))return;const s=this._createOptimizedFeature(e.uid,t);h(s)||(i.featureStore.add(s),m(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!P(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=R(x(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),r=I(s,this._hasZ,!1);return new O(r,{[u]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(d(t))return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=H.toJSON(e),i=this._hasZ,s=new M({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new W({featureStore:s,fields:[{name:u,type:"esriFieldTypeOID",alias:u}],geometryType:t,hasM:!1,hasZ:i,objectIdField:u,spatialReference:this.spatialReference,scheduler:d(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),m(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:r}=this._sources,o=[];return d(t)&&o.push(e(t)),d(i)&&o.push(e(i)),d(s)&&o.push(e(s)),d(r)&&o.push(e(r)),o}};n([l()],a.prototype,"getGraphicsLayers",void 0),n([l({constructOnly:!0})],a.prototype,"layerSource",void 0),n([l({constructOnly:!0})],a.prototype,"spatialReference",void 0),n([l({constructOnly:!0})],a.prototype,"view",void 0),n([l({readOnly:!0})],a.prototype,"updating",null),n([l({readOnly:!0})],a.prototype,"availability",void 0),n([l()],a.prototype,"_hasZ",null),n([l()],a.prototype,"_snappingElevationAligner",null),n([l()],a.prototype,"_snappingElevationFilter",null),n([l()],a.prototype,"_symbologySnappingFetcher",null),n([l()],a.prototype,"_extrudedPolygonSymbolsCount",void 0),n([l()],a.prototype,"_getGroundElevation",null),a=n([Z("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],a);const u="OBJECTID";export{a as GraphicsSnappingSource};
