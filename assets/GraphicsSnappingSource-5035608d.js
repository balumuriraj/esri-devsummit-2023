import{hn as w,v as b,R as m,h as y,l as E,b as k,jo as F,cU as d,a3 as C,$ as c,af as $,i5 as A,dc as R,ni as g,dX as G,bP as P,dd as x,l3 as I,jh as O,e as a,y as l,a as H,ey as Z,dx as z}from"./calcite-c5ae4991.js";import{p as L}from"./normalizeUtilsSync-f9670301.js";import{g as M}from"./FeatureStore-8d653403.js";import{e as j}from"./QueryEngine-856a56fe.js";import{y as W}from"./elevationInfoUtils-def3e352.js";import{d as q,b as T}from"./DimensionAnalysisView3D-afedf533.js";import{i as B,p as U}from"./queryEngineUtils-0c823715.js";import{r as _,a as D,n as f}from"./symbologySnappingCandidates-80133064.js";import"./index-9a6385f7.js";import"./BoundsStore-32c0ea98.js";import"./PooledRBush-52d39e88.js";import"./optimizedFeatureQueryEngineAdapter-5d25bc4d.js";import"./centroid-b9acbfa6.js";import"./utils-d27f2aa1.js";import"./projectionSupport-c2c1f4b7.js";import"./json-48e3ea08.js";import"./QueryEngineResult-7bb9e34b.js";import"./quantizationUtils-a15bd53f.js";import"./WhereClause-19168e5f.js";import"./executionError-fb3f283a.js";import"./utils-d04d4fee.js";import"./generateRendererUtils-0781e0f0.js";import"./SnappingCandidate-970faec6.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-bf0170ce.js";import"./LineVisualElement-520cb14e.js";import"./MediaLayerVideo-b25b4fca.js";import"./sphere-5ce3b13c.js";import"./mat3f64-50f3b9f6.js";import"./mat4f64-abdda1bb.js";import"./quatf64-f8f1c132.js";import"./Util-2b929b00.js";import"./plane-6ecad71b.js";import"./spatialReferenceEllipsoidUtils-87122df3.js";import"./scaleUtils-a8d07219.js";import"./ElevationSamplerData-41a54d7d.js";import"./objectResourceUtils-8fb711c9.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-bc307796.js";import"./vec33-164586fc.js";import"./DefaultMaterial_COLOR_GAMMA-941dbf6c.js";import"./types-e1c0a5bf.js";import"./enums-e2e92c86.js";import"./Version-e2fa8281.js";import"./quat-8dcd84de.js";import"./resourceUtils-527631ac.js";import"./basicInterfaces-7449a8bf.js";import"./Indices-84de656e.js";import"./NestedMap-1b5db22e.js";import"./requestImageUtils-67552ee5.js";import"./symbolColorUtils-14fb8f64.js";import"./VertexAttribute-15d1866a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./OrderIndependentTransparency-5f7257d7.js";import"./Texture-3d2bcec7.js";import"./FramebufferObject-d9042b3f.js";import"./VertexElementDescriptor-2925c6af.js";import"./InterleavedLayout-45bbbdfe.js";import"./vec3f32-01c06d8d.js";import"./Octree-65a3a6a2.js";import"./edgeProcessing-fca251f2.js";import"./deduplicate-54cc928a.js";import"./MeshComponent-9e26db57.js";import"./earcut-61f7b102.js";import"./imageUtils-c2d0d1ae.js";import"./projection-425e8064.js";import"./ZoomMomentumEstimator-f0d7cb62.js";import"./floatRGBA-2dd25736.js";import"./dehydratedFeatures-ce9ee959.js";import"./labelFormatUtils-2486d06e.js";import"./orientedBoundingBox-d2c06194.js";import"./quatf32-51a323b8.js";import"./callExpressionWithFeature-94cb1131.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./geometryServiceUtils-b1997a16.js";import"./project-0e0370f9.js";import"./LercDecoder-25ed2639.js";import"./VectorTile-ade0a955.js";import"./enums-fb086c25.js";import"./config-1337d16e.js";import"./TiledDisplayObject-0268aa47.js";import"./DisplayObject-b5071d0a.js";import"./rasterUtils-0aabb0e8.js";import"./resources-4ce48b80.js";import"./workerHelper-33dafb63.js";import"./webgl-debug-7f880832.js";import"./RenderingContext-f0258ff2.js";import"./ProgramCache-ddf14e3e.js";import"./Program-2221c2b1.js";import"./MediaLayer-faedb24a.js";import"./MediaElementView-92573d58.js";import"./resourceExtension-a1892050.js";import"./prism-line-numbers-713161a8.js";import"./label2-e5a29f4c.js";import"./interactive-1de2e238.js";import"./loadable-6afd516d.js";import"./t9n-b59ffad1.js";import"./observers-c89705b8.js";import"./icon-179b3e31.js";import"./loader-dc9b20b1.js";import"./guid-51402ee7.js";import"./LengthDimension-f30ab776.js";import"./Segment-dbfb173b.js";import"./analysisViewUtils-ad794640.js";import"./ImageMaterial-b8486f1d.js";import"./Factory-7ff71f8e.js";import"./RightAngleQuadVisualElement-2c22a714.js";import"./VisualElementResources-de04f9e5.js";import"./PointVisualElement-e21f219e.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-59135cd9.js";import"./dehydratedFeatureComparison-52788bbf.js";import"./RenderTexture-4c0a650d.js";import"./VertexSnappingCandidate-a79ea0a5.js";const v="graphics-collections";let n=class extends w(b){get updating(){return this.updatingHandles.updating}get _hasZ(){const t=this.view;return m(t)&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:t}=this,{layer:e}=this.layerSource,i=m(t)&&t.type==="3d";if(!i||e.type==="map-notes")return _();const o=async(s,r)=>(await Z(t.whenLayerView(e),r)).elevationAlignPointsInFeatures(s,r);return _(i,{elevationInfo:e.elevationInfo,alignPointsInFeatures:o,spatialReference:t.spatialReference})}get _snappingElevationFilter(){const{view:t}=this,e=m(t)&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes";return D(e)}get _symbologySnappingFetcher(){const{view:t}=this,{layer:e}=this.layerSource,i=m(t)&&t.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&e.type!=="map-notes"&&o?f(o,async(s,r)=>{const p=await t.whenLayerView(e);return d(r),p.queryForSymbologySnapping({candidates:s,spatialReference:t.spatialReference},r)}):f()}constructor(t){super(t),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const t of this._pendingAdds)t.task.abort();this._pendingAdds.length=0,this._mapSources(t=>this._destroySource(t))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(v);for(const o of i)this._addMany(o.graphics.toArray()),this.handles.add([o.on("graphic-update",s=>this._onGraphicUpdate(s)),this.updatingHandles.addOnCollectionChange(()=>o.graphics,s=>this._onGraphicsChanged(s))],v)},y);const{view:t}=this,{layer:e}=this.layerSource;m(t)&&t.type==="3d"&&e.type!=="map-notes"&&this.addHandles([t.elevationProvider.on("elevation-change",({context:i})=>{W(i,e.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),E(()=>e.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),y),k(()=>e,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(t,e){const{point:i}=t,o=await F(this._mapSources(p=>this._fetchCandidatesForSource(p,t,e)));d(e);const s=this._getGroundElevation,r=o.flat().map(p=>B(p,s));return q(i,r),r}get _getGroundElevation(){return U(this.view)}async _fetchCandidatesForSource(t,e,i){var u;const o=T(e,((u=C(this.view))==null?void 0:u.type)??"2d"),s=await t.queryEngine.executeQueryForSnapping(o,i);d(i);const r=await this._snappingElevationAligner.alignCandidates(s.candidates,i);d(i);const p=await this._symbologySnappingFetcher.fetch(r,i);d(i);const S=p.length===0?r:[...r,...p];return this._snappingElevationFilter.filter(o,S)}refresh(){}_onGraphicUpdate(t){if(this.getGraphicsLayers().some(e=>e.graphics.includes(t.graphic)))switch(t.property){case"geometry":case"visible":this._remove(t.graphic),this._addMany([t.graphic])}}_onGraphicsChanged(t){for(const e of t.removed)this._remove(e);this._addMany(t.added)}_addMany(t){const e=[],i=new Map;for(const o of t)c(o.geometry)||(this._needsInitializeProjection(o.geometry.spatialReference)?(e.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(e,i)}_createPendingAdd(t,e){if(!t.length)return;const i=$(async r=>{await A(t.map(p=>({source:p,dest:this.spatialReference})),{signal:r}),this._markLoadedSpatialReferences(t);for(const[,p]of e)this._add(p)});this.updatingHandles.addPromise(i.promise);const o={task:i,graphics:e},s=()=>z(this._pendingAdds,o);i.promise.then(s,s),this._pendingAdds.push(o)}_markLoadedSpatialReferences(t){for(const e of t)e.wkid!=null&&this._loadedWkids.add(e.wkid),e.wkt!=null&&this._loadedWkts.add(e.wkt)}_add(t){if(c(t.geometry)||!t.visible)return;let e=t.geometry;if(e.type==="mesh")return;e.type==="extent"&&(e=R.fromExtent(e));const i=this._ensureSource(e.type);if(c(i))return;const o=this._createOptimizedFeature(t.uid,e);c(o)||(i.featureStore.add(o),g(t.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(t){return(t.wkid==null||!this._loadedWkids.has(t.wkid))&&(t.wkt==null||!this._loadedWkts.has(t.wkt))&&!G(t,this.spatialReference)}_createOptimizedFeature(t,e){const i=P(L(e),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),s=x(o,this._hasZ,!1);return new I(s,{[h]:t},null,t)}_ensureGeometryHasZ(t){if(!this._hasZ)return t;const e=o=>{for(;o.length<3;)o.push(0)},i=t.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(e);break;case"polyline":i.paths.forEach(o=>o.forEach(e));break;case"polygon":i.rings.forEach(o=>o.forEach(e))}return i}_ensureSource(t){const e=this._sources[t];if(m(e))return e;const i=this._createSource(t);return this._sources[t]=i,i}_createSource(t){const e=O.toJSON(t),i=this._hasZ,o=new M({geometryType:e,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new j({featureStore:o,fields:[{name:h,type:"esriFieldTypeOID",alias:h}],geometryType:e,hasM:!1,hasZ:i,objectIdField:h,spatialReference:this.spatialReference,scheduler:m(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:t}}_remove(t){this._mapSources(e=>this._removeFromSource(e,t));for(const e of this._pendingAdds)e.graphics.delete(t.uid),e.graphics.size===0&&e.task.abort()}_removeFromSource(t,e){const i=e.uid;t.featureStore.has(i)&&(t.featureStore.removeById(e.uid),g(e.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(t){t.queryEngine.destroy(),this._sources[t.type]=null}_mapSources(t){const{point:e,polygon:i,polyline:o,multipoint:s}=this._sources,r=[];return m(e)&&r.push(t(e)),m(i)&&r.push(t(i)),m(o)&&r.push(t(o)),m(s)&&r.push(t(s)),r}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),a([l()],n.prototype,"_getGroundElevation",null),n=a([H("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const h="OBJECTID";export{n as GraphicsSnappingSource};
