import{a1 as a,aA as p,aF as o,r as g,ac as s,ad as m,af as l}from"./index-738d935d.js";import{f as c}from"./LayerView2D-f3ecbecf.js";import{i as n}from"./GraphicContainer-7120c266.js";import{a as d}from"./GraphicsView2D-7b26e85b.js";import{u}from"./LayerView-1b945bf7.js";import"./Container-11969b8c.js";import"./definitions-3ddd14a8.js";import"./enums-b1d611e3.js";import"./BaseGraphicContainer-6c950b21.js";import"./FeatureContainer-987f9077.js";import"./AttributeStoreView-2b8ac15d.js";import"./visualVariablesUtils-f04c4def.js";import"./color-9f576cea.js";import"./enums-4b2a86a0.js";import"./number-b10bd8f5.js";import"./visualVariablesUtils-fbbca9e0.js";import"./TileContainer-a917d354.js";import"./WGLContainer-ac65aabf.js";import"./WGLBrushVTLSymbol-3a605920.js";import"./StyleDefinition-7d58136b.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-1b0f517f.js";import"./MaterialKey-071ea281.js";import"./alignmentUtils-ae955d28.js";import"./utils-862b3f6d.js";import"./heatmapTextureUtils-fcd30222.js";import"./cimAnalyzer-c61475d8.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./projectionSupport-d70ac199.js";import"./json-48e3ea08.js";import"./Matcher-47b5ff38.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-8bc5ef2e.js";import"./ExpandedCIM-aa517771.js";import"./schemaUtils-95f69e1c.js";import"./util-dd1f0345.js";import"./ComputedAttributeStorage-eff52a13.js";import"./arcadeTimeUtils-f06505ea.js";import"./executionError-fb3f283a.js";import"./centroid-f5daa837.js";import"./GraphicsView-f9d61ea4.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(u){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new d({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=a(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof p?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):o.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(g);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const pi=e;export{pi as default};
