import{bd as S,p as M,l as R,ai as q,w as U,e as h,y as x,a as I}from"./calcite-8912bd40.js";import{a as w}from"./BitmapContainer-ba2ab01d.js";import{f as E}from"./LayerView2D-638c55c1.js";import{v as H}from"./ExportStrategy-cf49dd17.js";import{u as W}from"./LayerView-abbb3570.js";import{i as A}from"./RefreshableLayerView-e4d9e9c9.js";import{i as F}from"./WMSLayerView-a3d25dbf.js";import"./index-00759e4a.js";import"./WGLContainer-9a32a1e6.js";import"./definitions-3ddd14a8.js";import"./FramebufferObject-8b18fc0c.js";import"./enums-e2e92c86.js";import"./Texture-563cf5e5.js";import"./VertexElementDescriptor-2925c6af.js";import"./WGLBrushVTLSymbol-a588e1a9.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./enums-b1d611e3.js";import"./number-b10bd8f5.js";import"./StyleDefinition-7d58136b.js";import"./enums-4b2a86a0.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./color-e324e445.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-646e3fe5.js";import"./Program-77209250.js";import"./MaterialKey-2c87dd06.js";import"./alignmentUtils-ae955d28.js";import"./utils-8b171ac3.js";import"./heatmapTextureUtils-56fc7bff.js";import"./Container-0797c889.js";import"./DisplayObject-87c37b69.js";import"./earcut-61f7b102.js";import"./MapView-ee19e5d5.js";import"./unitBezier-881ac1eb.js";import"./TileStrategy-90354c21.js";import"./TileStore-9a3ccc75.js";import"./TileInfoView-9dfc6c79.js";import"./ClipRect-59ab066a.js";import"./Bitmap-b524c69a.js";import"./ExportWMSImageParameters-d52d2b49.js";let o=class extends F(A(E(W))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch(e=>{S(e)||M.getLogger(this.declaredClass).error(e)})}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:r}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new H({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:r}=this,{x:a,y:p}=t,{spatialReference:v}=e;let i,s=0,d=0;if(r.children.some(b=>{const{width:c,height:g,resolution:l,x:m,y:n}=b,y=m+l*c,f=n-l*g;return a>=m&&a<=y&&p<=n&&p>=f&&(i=new U({xmin:m,ymin:f,xmax:y,ymax:n,spatialReference:v}),s=c,d=g,!0)}),!i)return null;const u=i.width/s,C=Math.round((a-i.xmin)/u),$=Math.round((i.ymax-p)/u);return{extent:i,width:s,height:d,x:C,y:$}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,r,a){return this.layer.fetchImageBitmap(t,e,r,{timeExtent:this.timeExtent,...a})}};h([x()],o.prototype,"strategy",void 0),h([x()],o.prototype,"updating",void 0),o=h([I("esri.views.2d.layers.WMSLayerView2D")],o);const $t=o;export{$t as default};
