import{bP as k,M as A,ep as z,gY as I,j as F,l as H,aj as W,ai as v,w as U,R as D,$ as Y,gH as K,G as L,gb as J,h9 as j,ha as Q,hb as X,e as V,y as S,a as Z}from"./calcite-8912bd40.js";import{b as M,g as tt,d as et}from"./kmlUtils-877a4324.js";import{T as it,S as at,R as st}from"./Bitmap-b524c69a.js";import{a as rt}from"./BitmapContainer-ba2ab01d.js";import{f as ot}from"./LayerView2D-638c55c1.js";import{i as P}from"./GraphicContainer-f82c4282.js";import{a as R}from"./GraphicsView2D-685c4cd4.js";import{u as nt}from"./LayerView-abbb3570.js";import{C as lt,$ as pt}from"./rasterProjectionHelper-664970f2.js";import{n as ht}from"./WGLContainer-9a32a1e6.js";import{o as mt}from"./MaterialPrograms-eb26b2c2.js";import{P as T,G as E,D as q,L as G,Y as ct,V as dt,f as N}from"./enums-e2e92c86.js";import{x as gt}from"./FramebufferObject-8b18fc0c.js";import{l as ut}from"./rasterUtils-7694cc98.js";import{I as _t}from"./RenderingContext-0f21aa0e.js";import{E as B}from"./Texture-563cf5e5.js";import"./index-00759e4a.js";import"./DisplayObject-87c37b69.js";import"./enums-b1d611e3.js";import"./Container-0797c889.js";import"./definitions-3ddd14a8.js";import"./MapView-ee19e5d5.js";import"./unitBezier-881ac1eb.js";import"./TileStrategy-90354c21.js";import"./TileStore-9a3ccc75.js";import"./TileInfoView-9dfc6c79.js";import"./ClipRect-59ab066a.js";import"./BaseGraphicContainer-cbc6f003.js";import"./FeatureContainer-6da0f2bb.js";import"./AttributeStoreView-b58ac101.js";import"./TiledDisplayObject-419c008b.js";import"./visualVariablesUtils-b968e7b0.js";import"./color-e324e445.js";import"./enums-4b2a86a0.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-b10bd8f5.js";import"./visualVariablesUtils-a5773450.js";import"./TileContainer-13a45e9d.js";import"./utils-8b171ac3.js";import"./MaterialKey-2c87dd06.js";import"./alignmentUtils-ae955d28.js";import"./vec3f32-01c06d8d.js";import"./cimAnalyzer-96bde6b1.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-df1a8f01.js";import"./quantizationUtils-b3b2ae2a.js";import"./floatRGBA-ca2b39ca.js";import"./normalizeUtilsSync-3ea564a9.js";import"./projectionSupport-d23d7a2d.js";import"./json-48e3ea08.js";import"./Matcher-6c362377.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-1fd8939a.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./ExpandedCIM-be73cc27.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-595294e3.js";import"./util-2ff47657.js";import"./ComputedAttributeStorage-1643f27d.js";import"./arcadeTimeUtils-c565fdc8.js";import"./executionError-fb3f283a.js";import"./centroid-bf48eee6.js";import"./GraphicsView-d1a40b68.js";import"./WGLBrushVTLSymbol-a588e1a9.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./StyleDefinition-7d58136b.js";import"./config-1337d16e.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-646e3fe5.js";import"./Program-77209250.js";import"./heatmapTextureUtils-56fc7bff.js";import"./programUtils-f035fe8a.js";import"./ProgramCache-f29c900e.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-5f7257d7.js";import"./basicInterfaces-7449a8bf.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./webgl-debug-7f880832.js";class h{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(h._instance)return h._instanceRefCount++,h._instance;h._instanceRefCount=1,h._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new _t(i,{})}const s={applyProjection:!0,bilinear:!1,bicubic:!1},r=mt("raster/reproject","raster/reproject",new Map([["a_position",0]]),s);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ht(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,s,r=!1){const i=k(t.extent,s),a=new A({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:l}=lt(a,s,t.extent);let p=(o+l)/2;const n=Math.round((i.xmax-i.xmin)/p),d=Math.round((i.ymax-i.ymin)/p);p=(i.width/n+i.height/d)/2;const C=new A({x:p,y:p,spatialReference:i.spatialReference}),w=pt({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),x=ut(this._rctx,w),u=new B(this._rctx,{width:n,height:d,pixelFormat:T.RGBA,dataType:E.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:G.LINEAR,hasMipmap:!1}),m=new gt(this._rctx,{colorTarget:ct.TEXTURE,depthStencilTarget:dt.NONE,width:n,height:d},u);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:y=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",y,f),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),r){const{width:_=0,height:c=0}=m.descriptor,b=new ImageData(_,c);return m.readPixels(0,0,_,c,T.RGBA,E.UNSIGNED_BYTE,b.data),m.detachColorTexture(N.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i,imageData:b}}return m.detachColorTexture(N.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i}}reprojectBitmapData(t,s){const r=it(t.bitmapData)?at(t.bitmapData):t.bitmapData,i=new B(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:T.RGBA,dataType:E.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:G.LINEAR,hasMipmap:!1},r),a=this.reprojectTexture({texture:i,extent:t.extent},s,!0);a.texture.dispose();const o=document.createElement("canvas"),l=a.imageData;return o.width=l.width,o.height=l.height,o.getContext("2d").putImageData(l,0,0),{bitmapData:o,extent:a.extent}}async loadAndReprojectBitmapData(t,s,r){const i=(await z(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const o=a.getContext("2d");o.drawImage(i,0,0);const l=o.getImageData(0,0,a.width,a.height);if(s.spatialReference.equals(r))return{bitmapData:l,extent:s};const p=this.reprojectBitmapData({bitmapData:l,extent:s},r);return{bitmapData:p.bitmapData,extent:p.extent}}destroy(){this._ownsRctx?(h._instanceRefCount--,h._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),h._instance=null)):(this._quad.dispose(),this._program.dispose())}}h._instanceRefCount=0;class O{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends ot(nt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new O,this._fetchController=null,this.allVisiblePoints=new I,this.allVisiblePolylines=new I,this.allVisiblePolygons=new I,this.allVisibleMapImages=new F}async hitTest(e,t){var r,i,a;const s=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(o=>(o.layer=s,o.sourceLayer=s,{type:"graphic",graphic:o,layer:s,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),H(()=>this.layer.visibleSublayers,e=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const t of e){const s=this._kmlVisualData.allSublayers.get(t.id);s&&(s.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new h}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=v(this._polygonsView),this._polylinesView=v(this._polylinesView),this._pointsView=v(this._pointsView),this._imageReprojector=v(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,s;((t=this.view.spatialReference)!=null&&t.isWGS84||(s=this.view.spatialReference)!=null&&s.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,U.fromJSON(e.extent),this.view.spatialReference).then(r=>{const i=new st(r.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=r.extent.xmin,i.y=r.extent.ymax,i.resolution=r.extent.width/r.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:s,viewBoundScale:r,httpQuery:i}=e;if(D(s)){if(Y(t))throw new Error("Loading this network link requires a view state.");let a;if(await K(),D(r)&&r!==1){const c=new U(t.extent);c.expand(r),a=c}else a=t.extent;a=k(a,L.WGS84);const o=k(a,L.WebMercator),l=a.xmin,p=a.xmax,n=a.ymin,d=a.ymax,C=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,x=Math.max(o.width,o.height),u={"[bboxWest]":l.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":C.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":J,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const b in c)for(const $ in u)c[b]=c[b].replace($,u[$])},y=j(s);m(y);let f={};D(i)&&(f=j(i),m(f));const _=Q(e.href);return _.query={..._.query,...y,...f},`${_.path}?${X(y)}`}return e.href}async _fetchService(e){const t=new O;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,s){return this._fetchParsedKML(e,s).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await M(i.points):[],o=i.polylines?await M(i.polylines):[],l=i.polygons?await M(i.polygons):[],p=i.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:i.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:i.id}))),t.allPolygons.push(...l.map(n=>({item:n,sublayerId:i.id}))),t.allMapImages.push(...p.map(n=>({item:n,sublayerId:i.id}))),i.networkLink){const n=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(n,t,s)}}})}_fetchParsedKML(e,t){return tt(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(s=>et(s.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};V([S()],g.prototype,"_pointsView",void 0),V([S()],g.prototype,"_polylinesView",void 0),V([S()],g.prototype,"_polygonsView",void 0),V([S()],g.prototype,"updating",void 0),g=V([Z("esri.views.2d.layers.KMLLayerView2D")],g);const ze=g;export{ze as default};
