import{bd as S,p as M,l as R,ai as q,w as U,e as h,y as x,a as I}from"./calcite-c5ae4991.js";import{a as w}from"./BitmapContainer-d9c6decd.js";import{f as E}from"./LayerView2D-88fd32e8.js";import{v as H}from"./ExportStrategy-e891c937.js";import{u as W}from"./LayerView-d2d47806.js";import{i as A}from"./RefreshableLayerView-3999328b.js";import{i as F}from"./WMSLayerView-7add68e2.js";import"./index-9a6385f7.js";import"./WGLContainer-02cfa21d.js";import"./definitions-3ddd14a8.js";import"./FramebufferObject-d9042b3f.js";import"./enums-e2e92c86.js";import"./Texture-3d2bcec7.js";import"./VertexElementDescriptor-2925c6af.js";import"./WGLBrushVTLSymbol-67363b39.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./enums-b1d611e3.js";import"./number-b10bd8f5.js";import"./StyleDefinition-7d58136b.js";import"./enums-4b2a86a0.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./color-b3c5ad11.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-f39983cc.js";import"./Program-2221c2b1.js";import"./MaterialKey-1f5dd6e2.js";import"./alignmentUtils-ae955d28.js";import"./utils-d084e5dc.js";import"./heatmapTextureUtils-7a5994f1.js";import"./Container-c668494e.js";import"./DisplayObject-b5071d0a.js";import"./earcut-61f7b102.js";import"./MapView-c3d00f71.js";import"./unitBezier-881ac1eb.js";import"./TileStrategy-6e83933b.js";import"./TileStore-bec0a021.js";import"./TileInfoView-c5645cd8.js";import"./ClipRect-c491bd72.js";import"./Bitmap-e270b20f.js";import"./ExportWMSImageParameters-884ab36c.js";let o=class extends F(A(E(W))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch(e=>{S(e)||M.getLogger(this.declaredClass).error(e)})}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:r}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new H({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:r}=this,{x:a,y:p}=t,{spatialReference:v}=e;let i,s=0,d=0;if(r.children.some(b=>{const{width:c,height:g,resolution:l,x:m,y:n}=b,y=m+l*c,f=n-l*g;return a>=m&&a<=y&&p<=n&&p>=f&&(i=new U({xmin:m,ymin:f,xmax:y,ymax:n,spatialReference:v}),s=c,d=g,!0)}),!i)return null;const u=i.width/s,C=Math.round((a-i.xmin)/u),$=Math.round((i.ymax-p)/u);return{extent:i,width:s,height:d,x:C,y:$}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,r,a){return this.layer.fetchImageBitmap(t,e,r,{timeExtent:this.timeExtent,...a})}};h([x()],o.prototype,"strategy",void 0),h([x()],o.prototype,"updating",void 0),o=h([I("esri.views.2d.layers.WMSLayerView2D")],o);const $t=o;export{$t as default};
