import{ai as s,c1 as o,j as a,R as m,e as p,y as g,a as l}from"./calcite-8912bd40.js";import{f as c}from"./LayerView2D-638c55c1.js";import{i as n}from"./GraphicContainer-f82c4282.js";import{a as d}from"./GraphicsView2D-685c4cd4.js";import{u}from"./LayerView-abbb3570.js";import"./index-00759e4a.js";import"./Container-0797c889.js";import"./DisplayObject-87c37b69.js";import"./definitions-3ddd14a8.js";import"./enums-e2e92c86.js";import"./Texture-563cf5e5.js";import"./MapView-ee19e5d5.js";import"./unitBezier-881ac1eb.js";import"./TileStrategy-90354c21.js";import"./TileStore-9a3ccc75.js";import"./TileInfoView-9dfc6c79.js";import"./ClipRect-59ab066a.js";import"./enums-b1d611e3.js";import"./BaseGraphicContainer-cbc6f003.js";import"./FeatureContainer-6da0f2bb.js";import"./AttributeStoreView-b58ac101.js";import"./TiledDisplayObject-419c008b.js";import"./visualVariablesUtils-b968e7b0.js";import"./color-e324e445.js";import"./enums-4b2a86a0.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-b10bd8f5.js";import"./visualVariablesUtils-a5773450.js";import"./FramebufferObject-8b18fc0c.js";import"./TileContainer-13a45e9d.js";import"./WGLContainer-9a32a1e6.js";import"./WGLBrushVTLSymbol-a588e1a9.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./StyleDefinition-7d58136b.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-646e3fe5.js";import"./Program-77209250.js";import"./MaterialKey-2c87dd06.js";import"./alignmentUtils-ae955d28.js";import"./utils-8b171ac3.js";import"./heatmapTextureUtils-56fc7bff.js";import"./earcut-61f7b102.js";import"./vec3f32-01c06d8d.js";import"./cimAnalyzer-96bde6b1.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-df1a8f01.js";import"./quantizationUtils-b3b2ae2a.js";import"./floatRGBA-ca2b39ca.js";import"./normalizeUtilsSync-3ea564a9.js";import"./projectionSupport-d23d7a2d.js";import"./json-48e3ea08.js";import"./Matcher-6c362377.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-1fd8939a.js";import"./ExpandedCIM-be73cc27.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-595294e3.js";import"./util-2ff47657.js";import"./ComputedAttributeStorage-1643f27d.js";import"./arcadeTimeUtils-c565fdc8.js";import"./executionError-fb3f283a.js";import"./centroid-bf48eee6.js";import"./GraphicsView-d1a40b68.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(u){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new d({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=s(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):a.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(m);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};p([g()],e.prototype,"graphicsView",void 0),e=p([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const qi=e;export{qi as default};
