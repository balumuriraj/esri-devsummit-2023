import{a1 as g,cb as u,R as d,a3 as f,$ as y,h7 as b,e as n,y as p,a as I}from"./calcite-8912bd40.js";import{n as R}from"./LayerView3D-4128a20f.js";import{c as w}from"./TiledLayerView3D-7d5deb80.js";import{ad as T}from"./MediaLayerVideo-42e60ea8.js";import{f as v}from"./ImageryTileLayerView-15bc95f1.js";import{u as z}from"./LayerView-abbb3570.js";import{i as x}from"./RefreshableLayerView-e4d9e9c9.js";import{a as S}from"./drapedUtils-08d2401b.js";import"./index-00759e4a.js";import"./sphere-d0e5285d.js";import"./mat3f64-50f3b9f6.js";import"./mat4f64-abdda1bb.js";import"./quatf64-f8f1c132.js";import"./Util-6d3f024a.js";import"./plane-5e2b046c.js";import"./spatialReferenceEllipsoidUtils-afb35af9.js";import"./scaleUtils-d13015f2.js";import"./ElevationSamplerData-e3118b17.js";import"./objectResourceUtils-782953c3.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-379a78a4.js";import"./vec33-69c9e93b.js";import"./DefaultMaterial_COLOR_GAMMA-6ed76d86.js";import"./types-e1c0a5bf.js";import"./enums-e2e92c86.js";import"./Version-aa0a1d91.js";import"./quat-7b70e9a8.js";import"./resourceUtils-527631ac.js";import"./basicInterfaces-7449a8bf.js";import"./Indices-d8bff7b2.js";import"./NestedMap-1b5db22e.js";import"./requestImageUtils-d1ba3b36.js";import"./symbolColorUtils-c9d24716.js";import"./VertexAttribute-15d1866a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./OrderIndependentTransparency-5f7257d7.js";import"./Texture-563cf5e5.js";import"./FramebufferObject-8b18fc0c.js";import"./VertexElementDescriptor-2925c6af.js";import"./InterleavedLayout-d57c91d0.js";import"./vec3f32-01c06d8d.js";import"./Octree-499541ed.js";import"./edgeProcessing-20e12367.js";import"./deduplicate-769a6f51.js";import"./MeshComponent-788e605a.js";import"./earcut-61f7b102.js";import"./imageUtils-c2d0d1ae.js";import"./projection-5969b753.js";import"./ZoomMomentumEstimator-ef57e6a4.js";import"./floatRGBA-ca2b39ca.js";import"./dehydratedFeatures-3a140d03.js";import"./quantizationUtils-b3b2ae2a.js";import"./labelFormatUtils-71e1f841.js";import"./orientedBoundingBox-a14b97b5.js";import"./quatf32-51a323b8.js";import"./SnappingCandidate-970faec6.js";import"./callExpressionWithFeature-df1a8f01.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./geometryServiceUtils-a536bb19.js";import"./project-909a4219.js";import"./LercDecoder-65586d50.js";import"./VectorTile-d41a1f0f.js";import"./enums-fb086c25.js";import"./config-1337d16e.js";import"./TiledDisplayObject-419c008b.js";import"./DisplayObject-87c37b69.js";import"./rasterUtils-7694cc98.js";import"./resources-7587d8f4.js";import"./workerHelper-6131d203.js";import"./webgl-debug-7f880832.js";import"./RenderingContext-0f21aa0e.js";import"./ProgramCache-f29c900e.js";import"./Program-77209250.js";import"./MediaLayer-4c42fc2f.js";import"./MediaElementView-06baa4d4.js";import"./normalizeUtilsSync-3ea564a9.js";import"./resourceExtension-f31d9f10.js";import"./BoundsStore-00da37da.js";import"./PooledRBush-5a11bc7e.js";import"./prism-line-numbers-eff41b13.js";import"./label2-a2f37e65.js";import"./interactive-1de2e238.js";import"./loadable-6afd516d.js";import"./t9n-81df3a71.js";import"./observers-c89705b8.js";import"./icon-8e47fbec.js";import"./loader-c773e800.js";import"./guid-51402ee7.js";import"./rasterProjectionHelper-664970f2.js";import"./popupUtils-54bd9deb.js";let o=class extends v(x(w(R(z)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this.isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new g("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const e=u(()=>{var t,i;return(i=(t=this.view)==null?void 0:t.basemapTerrain)==null?void 0:i.tilingSchemeLocked}).then(()=>{const t=this.view.basemapTerrain.tilingScheme,i=this.layer.tileInfo,r=["png","png24","png32","jpg","mixed"].includes(i.format)&&t.compatibleWith(i);this.isAlignedMapTile=r;const m=r?i:t.toTileInfo();this.tileInfo=m,this.updatingHandles.add(()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent],()=>this.refresh())});this.addResolvingPromise(e)}destroy(){this.layer.decreaseRasterJobHandlerUsage(),this.view=null}get _blankTile(){const e=document.createElement("canvas"),t=e.getContext("2d"),[i,r]=this.tileInfo.size;return e.width=i,e.height=r,t.clearRect(0,0,i,r),t.getImageData(0,0,i,r)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){const e=this.tileInfo.lods,t=this.layer.tileInfo.lods,i=e[0].scale,r=t[t.length-1].scale;return this.levelRangeFromScaleRange(i,r)}_getfullExtent(){return this.projectFullExtent(this.view.basemapTerrain&&d(this.view.basemapTerrain.spatialReference)?this.view.basemapTerrain.spatialReference:this.view.spatialReference)}async fetchTile(e,t,i,r){const m=this.tileInfo,h=this._canSymbolizeInWebGL(),c={tileInfo:m,requestRawData:h,signal:f(r.signal),timeExtent:this.timeExtent,requestAsImageElement:this.isAlignedMapTile},s=await this.layer.fetchTile(e,t,i,c);if(s instanceof HTMLImageElement)return s;let l=s&&s.pixelBlock;if(y(l))return this._blankTile;if(!h&&(l=await this.layer.applyRenderer(s),y(l)))return this._blankTile;const a=new T([e,t,i],l,m.size[0],m.size[1]);return h?(a.symbolizerRenderer=this.layer.symbolizer.rendererJSON,a.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e)),a.transformGrid=s.transformGrid):a.isRendereredSource=!0,a.interpolation=this.layer.interpolation,a.bandIds=this.layer.bandIds,a}_getSymbolizerOptions(e){const t=this.tileInfo.lodAt(e).resolution;return{pixelBlock:null,isGCS:this.view.basemapTerrain&&d(this.view.basemapTerrain.spatialReference)?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:t,y:t},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(e){this._canSymbolizeInWebGL()&&JSON.stringify(e.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(e.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e.lij[0])))}createFetchPopupFeaturesQueryGeometry(e,t){return S(e,t,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){return b("3d").supportsTextureFloat&&this.layer.symbolizer.canRenderInWebGL}};n([p({readOnly:!0})],o.prototype,"_blankTile",null),n([p({readOnly:!0})],o.prototype,"imageFormatIsOpaque",null),n([p({readOnly:!0})],o.prototype,"hasMixedImageFormats",null),n([p({readOnly:!0})],o.prototype,"dataLevelRange",null),o=n([I("esri.views.3d.layers.ImageryTileLayerView3D")],o);const lt=o;export{lt as default};
