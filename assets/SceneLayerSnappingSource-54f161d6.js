import{e as i,y as o,a as u,ad as w,f as _,ah as S,aj as f,$ as y,nq as g,dV as k,ak as b,v as C,cU as L,R as H}from"./calcite-8912bd40.js";import{bW as E}from"./MediaLayerVideo-42e60ea8.js";import{h as O}from"./LercDecoder-65586d50.js";import{E as $}from"./sphere-d0e5285d.js";import{r as I,l as R}from"./DimensionAnalysisView3D-96b9bbd9.js";import{r as V}from"./VertexSnappingCandidate-afa006d0.js";import"./index-00759e4a.js";import"./mat4f64-abdda1bb.js";import"./Util-6d3f024a.js";import"./plane-5e2b046c.js";import"./spatialReferenceEllipsoidUtils-afb35af9.js";import"./scaleUtils-d13015f2.js";import"./ElevationSamplerData-e3118b17.js";import"./objectResourceUtils-782953c3.js";import"./devEnvironmentUtils-5002a058.js";import"./mat3f64-50f3b9f6.js";import"./BufferView-379a78a4.js";import"./vec33-69c9e93b.js";import"./DefaultMaterial_COLOR_GAMMA-6ed76d86.js";import"./types-e1c0a5bf.js";import"./enums-e2e92c86.js";import"./Version-aa0a1d91.js";import"./quat-7b70e9a8.js";import"./quatf64-f8f1c132.js";import"./resourceUtils-527631ac.js";import"./basicInterfaces-7449a8bf.js";import"./Indices-d8bff7b2.js";import"./NestedMap-1b5db22e.js";import"./requestImageUtils-d1ba3b36.js";import"./symbolColorUtils-c9d24716.js";import"./VertexAttribute-15d1866a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./OrderIndependentTransparency-5f7257d7.js";import"./Texture-563cf5e5.js";import"./FramebufferObject-8b18fc0c.js";import"./VertexElementDescriptor-2925c6af.js";import"./InterleavedLayout-d57c91d0.js";import"./vec3f32-01c06d8d.js";import"./Octree-499541ed.js";import"./edgeProcessing-20e12367.js";import"./deduplicate-769a6f51.js";import"./MeshComponent-788e605a.js";import"./earcut-61f7b102.js";import"./imageUtils-c2d0d1ae.js";import"./projection-5969b753.js";import"./ZoomMomentumEstimator-ef57e6a4.js";import"./floatRGBA-ca2b39ca.js";import"./dehydratedFeatures-3a140d03.js";import"./quantizationUtils-b3b2ae2a.js";import"./labelFormatUtils-71e1f841.js";import"./orientedBoundingBox-a14b97b5.js";import"./quatf32-51a323b8.js";import"./SnappingCandidate-970faec6.js";import"./callExpressionWithFeature-df1a8f01.js";import"./DefaultVertexAttributeLayouts-5f20d8dd.js";import"./geometryServiceUtils-a536bb19.js";import"./project-909a4219.js";import"./VectorTile-d41a1f0f.js";import"./enums-fb086c25.js";import"./config-1337d16e.js";import"./TiledDisplayObject-419c008b.js";import"./DisplayObject-87c37b69.js";import"./rasterUtils-7694cc98.js";import"./resources-7587d8f4.js";import"./workerHelper-6131d203.js";import"./webgl-debug-7f880832.js";import"./RenderingContext-0f21aa0e.js";import"./ProgramCache-f29c900e.js";import"./Program-77209250.js";import"./MediaLayer-4c42fc2f.js";import"./MediaElementView-06baa4d4.js";import"./normalizeUtilsSync-3ea564a9.js";import"./resourceExtension-f31d9f10.js";import"./BoundsStore-00da37da.js";import"./PooledRBush-5a11bc7e.js";import"./prism-line-numbers-eff41b13.js";import"./label2-a2f37e65.js";import"./interactive-1de2e238.js";import"./loadable-6afd516d.js";import"./t9n-81df3a71.js";import"./observers-c89705b8.js";import"./icon-8e47fbec.js";import"./loader-c773e800.js";import"./guid-51402ee7.js";import"./LineVisualElement-b0e5ebeb.js";import"./LengthDimension-ebecad1f.js";import"./Segment-499df512.js";import"./elevationInfoUtils-551ce894.js";import"./analysisViewUtils-1aeb817c.js";import"./ImageMaterial-e77d3ec9.js";import"./Factory-befbd753.js";import"./RightAngleQuadVisualElement-10d61437.js";import"./VisualElementResources-b14774ca.js";import"./PointVisualElement-18444051.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-f7a23176.js";import"./QueryEngineResult-dfcfeac3.js";import"./WhereClause-8339ee75.js";import"./executionError-fb3f283a.js";import"./utils-e5a50699.js";import"./generateRendererUtils-5b0c1ef7.js";import"./projectionSupport-d23d7a2d.js";import"./json-48e3ea08.js";import"./utils-046b23b4.js";import"./dehydratedFeatureComparison-409d2bff.js";import"./RenderTexture-6105e069.js";let p=class extends w{constructor(t){super(t),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new j(this.schedule,{fetchAllEdgeLocations:(t,e)=>this._fetchAllEdgeLocations(t,e)})}async fetchCandidates(t,e){const r=t.coordinateHelper,{point:s}=t,a=P;this.renderCoordsHelper.toRenderCoords(s,r.spatialReference,a);const m=t.distance,d=typeof m=="number"?m:m.distance,l=await this._workerHandle.invoke({bounds:$(a[0],a[1],a[2],d),types:t.types},e);return l.candidates.sort((h,v)=>h.distance-v.distance),l.candidates.map(h=>this._convertCandidate(r,h))}async add(t,e){this._ids.add(t.id),await this._workerHandle.invokeMethod("add",t,e)}async remove(t,e){this._ids.delete(t.id),await this._workerHandle.invokeMethod("remove",t,e)}_convertCandidate(t,e){switch(e.type){case"edge":return new I({objectId:e.objectId,targetPoint:this._convertRenderCoordinate(t,e.target),edgeStart:this._convertRenderCoordinate(t,e.start),edgeEnd:this._convertRenderCoordinate(t,e.end),isDraped:!1});case"vertex":return new V({objectId:e.objectId,targetPoint:this._convertRenderCoordinate(t,e.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:t},e){const r=_();return this.renderCoordsHelper.fromRenderCoords(e,r,t),R(r)}async _fetchAllEdgeLocations(t,e){const r=[],s=[];for(const{id:a,uid:m}of t.components)this._ids.has(a)&&r.push((async()=>{const d=await this.fetchEdgeLocations(a,e.signal),l=d.locations.buffer;return s.push(l),{id:a,uid:m,objectIds:d.objectIds,locations:l,origin:d.origin,type:d.type}})());return{result:{components:(await Promise.all(r)).filter(({id:a})=>this._ids.has(a))},transferList:s}}};i([o({constructOnly:!0})],p.prototype,"renderCoordsHelper",void 0),i([o({constructOnly:!0})],p.prototype,"fetchEdgeLocations",void 0),i([o({constructOnly:!0})],p.prototype,"schedule",void 0),i([o({readOnly:!0})],p.prototype,"availability",void 0),p=i([u("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],p);class j extends O{constructor(e,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:r})}}const P=_();let n=class extends w{get updating(){return this.updatingHandles.updating}constructor(t){super(t),this.availability=1,this._abortController=new AbortController}destroy(){this._tracker=S(this._tracker),this._abortController=f(this._abortController)}initialize(){const{view:t}=this,e=t.resourceController;this._edgeWorker=new E(r=>e.immediate.schedule(r)),this._workerHandle=new p({renderCoordsHelper:this.view.renderCoordsHelper,schedule:r=>e.immediate.schedule(r),fetchEdgeLocations:async(r,s)=>{if(y(this._tracker))throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,s)}}),this.updatingHandles.addPromise(this._setupLayerView()),this.handles.add([g(this._workerHandle),g(this._edgeWorker)])}async fetchCandidates(t,e){return this._workerHandle.fetchCandidates(t,e)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const t=k(this._abortController,r=>r.signal),e=await this.getLayerView();y(e)||b(t)||(this._tracker=e.trackSnappingSources({add:(r,s)=>{this.updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:s},t))},remove:r=>{this.updatingHandles.addPromise(this._workerHandle.remove({id:r},t))}}))}};i([o({constructOnly:!0})],n.prototype,"getLayerView",void 0),i([o({constructOnly:!0})],n.prototype,"view",void 0),i([o({readOnly:!0})],n.prototype,"updating",null),i([o({readOnly:!0})],n.prototype,"availability",void 0),n=i([u("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],n);let c=class extends C{get updating(){return this._i3sSources.some(t=>t.updating)}constructor(t){super(t),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(t=>t.destroy()),this._i3sSources.length=0}initialize(){const{view:t}=this,e=this.layerSource.layer;this._i3sSources=e.type==="building-scene"?this._getBuildingSceneI3SSources(t,e):[this._getSceneLayerI3SSource(t,e)]}async fetchCandidates(t,e){const r=await Promise.all(this._i3sSources.map(s=>s.fetchCandidates(t,e)));return L(e),r.flat()}refresh(){this._i3sSources.forEach(t=>t.refresh())}_getBuildingSceneI3SSources(t,e){return e.allSublayers.toArray().map(r=>r.type==="building-component"?new n({getLayerView:async()=>(await t.whenLayerView(e)).whenSublayerView(r),view:t}):null).filter(H)}_getSceneLayerI3SSource(t,e){return new n({getLayerView:async()=>{const r=await t.whenLayerView(e);return r.type==="scene-layer-graphics-3d"?void 0:r},view:t})}};i([o({constructOnly:!0})],c.prototype,"layerSource",void 0),i([o({constructOnly:!0})],c.prototype,"view",void 0),i([o({readOnly:!0})],c.prototype,"updating",null),i([o({readOnly:!0})],c.prototype,"availability",void 0),c=i([u("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],c);export{c as SceneLayerSnappingSource};
