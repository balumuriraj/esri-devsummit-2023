import{r as o,aA as f,aF as w,a3 as p,a4 as n,bt as y,v as _,ac as V,af as v}from"./index-e2cce3f9.js";import{h as C}from"./Container-d40aedbe.js";import{r as b}from"./GroupContainer-82b340ba.js";import{f as H}from"./LayerView2D-fac76a75.js";import{i as g}from"./GraphicContainer-a3b06466.js";import{a as m}from"./GraphicsView2D-72a87443.js";import{u as $}from"./LayerView-6c77a651.js";import"./definitions-3ddd14a8.js";import"./WGLContainer-62cb470f.js";import"./WGLBrushVTLSymbol-5ea15046.js";import"./enums-b1d611e3.js";import"./number-b10bd8f5.js";import"./StyleDefinition-7d58136b.js";import"./enums-4b2a86a0.js";import"./GeometryUtils-dd03fc25.js";import"./color-149df6cc.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-adf845d2.js";import"./MaterialKey-9747ba7b.js";import"./alignmentUtils-ae955d28.js";import"./utils-7831b20c.js";import"./heatmapTextureUtils-b966ef75.js";import"./BaseGraphicContainer-7b08077b.js";import"./FeatureContainer-eaeac327.js";import"./AttributeStoreView-9cf534bd.js";import"./visualVariablesUtils-bad23641.js";import"./visualVariablesUtils-b4971c13.js";import"./TileContainer-e111862d.js";import"./cimAnalyzer-1fce05f4.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./projectionSupport-f926ae71.js";import"./json-48e3ea08.js";import"./Matcher-0fef0ddc.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-a1bfa3fb.js";import"./ExpandedCIM-a11830a4.js";import"./schemaUtils-3a81420e.js";import"./util-d8cbf8ac.js";import"./ComputedAttributeStorage-9fede039.js";import"./arcadeTimeUtils-244b113a.js";import"./executionError-fb3f283a.js";import"./centroid-d6b71598.js";import"./GraphicsView-70b34541.js";const d="sublayers",l="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends H($){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&a.popupTemplate&&(r.popupTemplate=a.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):w.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(o);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):T}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new g(this.view.featuresTilingScheme),r=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([p(()=>s.visible,h=>r.container.visible=h,n),p(()=>r.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.removeHandles(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const h=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",h.graphicUpdateHandler),p(()=>s.visible,u=>h.container.visible=u,n),p(()=>h.updating,()=>this.notifyChange("updating"),n)],l),a.addChild(h.container),this.container.addChild(a),i.push(h)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const yi=c;export{yi as default};
