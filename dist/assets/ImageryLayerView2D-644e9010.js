import{e as s,y as a,n as x,m as R}from"./cast-fcb46737.js";import{g}from"./Graphic-f0e54e86.js";import{j as S}from"./Collection-910b6f71.js";import{l as c,w as b,U as V}from"./reactiveUtils-4dabbb80.js";import{r as _,t as k,e as B}from"./typedArrayUtil-4d7bb04c.js";import"./ArrayPool-a8ee9378.js";import{i as C}from"./GraphicsCollection-c37a9ffd.js";import{y as D,d as I}from"./RasterVFDisplayObject-0676fcf6.js";import{y as T}from"./LayerView2D-2775dd38.js";import{o as U}from"./BaseGraphicContainer-76f5ab54.js";import{n as A}from"./HighlightGraphicContainer-92f548bb.js";import{s as P}from"./Error-ec6249b9.js";import{j as $,x as z}from"./promiseUtils-1e54421e.js";import{A as F}from"./pixelUtils-d9cd2e49.js";import{a as M}from"./BitmapContainer-5fb5f7d8.js";import{i as O}from"./utils-317368cb.js";import{i as j}from"./Bitmap-479ee434.js";import{v as J}from"./ExportStrategy-913accc5.js";import{U as L}from"./request-6fc81c4c.js";import{d as G}from"./HandleOwner-9b396af1.js";import{a as q}from"./Extent-da876e26.js";import{J as H}from"./rasterProjectionHelper-a7452876.js";import{x as N,d as W}from"./dataUtils-a534a9c7.js";import{o as K,d as Q}from"./WGLContainer-8a3733a0.js";import{I as E}from"./enums-4ca4641f.js";import{m as X}from"./ImageryLayerView-31e9d56f.js";import{u as Y}from"./LayerView-bd9a2316.js";import{i as Z}from"./RefreshableLayerView-7c1c2c75.js";import"./string-a318751c.js";import"./nextTick-3ee5a785.js";import"./geometry-b7901087.js";import"./Polyline-ff2d7c6b.js";import"./typeUtils-35750739.js";import"./jsonMap-7b8332c9.js";import"./PopupTemplate-40f3c9aa.js";import"./Clonable-545593ce.js";import"./fieldUtils-7f54c4b1.js";import"./preload-helper-3bce6601.js";import"./arcadeOnDemand-281a01eb.js";import"./enumeration-3a03bd31.js";import"./number-27cf8195.js";import"./locale-30120714.js";import"./Identifiable-bfe1ff30.js";import"./symbols-f8232671.js";import"./CIMSymbol-539bd447.js";import"./Symbol-f93ed9fd.js";import"./Color-fb64d77d.js";import"./colorUtils-639f4d25.js";import"./mathUtils-b4bb77e2.js";import"./vec3-e93e648f.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./vec4-790471c0.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-1f7f5126.js";import"./symbolLayerUtils3D-76acc268.js";import"./aaBoundingBox-657a9b82.js";import"./aaBoundingRect-193543b5.js";import"./persistableUrlUtils-5f719c3b.js";import"./Symbol3DAnchorPosition2D-5726d999.js";import"./collectionUtils-803d9ba8.js";import"./Portal-2bb189b3.js";import"./Loadable-268c900a.js";import"./Promise-376ab9f6.js";import"./PortalGroup-8e41557a.js";import"./PortalUser-659cc1d2.js";import"./Ellipsoid-89682c5e.js";import"./jsonUtils-229211af.js";import"./Evented-a45c8b0f.js";import"./SimpleObservable-23231131.js";import"./FramebufferObject-a3b9c52c.js";import"./enums-64ab819c.js";import"./Texture-243be4d7.js";import"./context-util-a4ce3a7b.js";import"./VertexElementDescriptor-2925c6af.js";import"./mat3-3fc68e72.js";import"./mat3f32-d3d088e8.js";import"./DefaultVertexAttributeLayouts-2bcf3941.js";import"./TileKey-5aef17b6.js";import"./vec2f64-30dc1443.js";import"./vec2f32-461e65a9.js";import"./Utils-69cc114d.js";import"./number-954e4ab6.js";import"./enums-2658a65c.js";import"./index-a864af46.js";import"./Cyclical-151bcc41.js";import"./CollectionFlattener-8f4d518b.js";import"./workers-6e30d081.js";import"./Connection-9a1cf8da.js";import"./Queue-b7d3cd48.js";import"./assets-8d3e737a.js";import"./intl-65a3e389.js";import"./messages-2289086c.js";import"./projection-290b739f.js";import"./unitUtils-45d1147c.js";import"./mat4-44a0988f.js";import"./zscale-89472cba.js";import"./TileInfo-b0eb8c90.js";import"./widget-fb292a2f.js";import"./uuid-73213768.js";import"./byteSizeEstimations-f0cab514.js";import"./executeQueryJSON-2fe748db.js";import"./normalizeUtils-27e29a72.js";import"./query-694f7287.js";import"./pbfQueryUtils-4adda2cc.js";import"./pbf-0e99a620.js";import"./OptimizedFeature-4ab8d380.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-1481fa99.js";import"./FeatureSet-d32b0eb8.js";import"./Field-61ec9870.js";import"./fieldType-f31285f7.js";import"./Query-b96bcde0.js";import"./TimeExtent-23e282b9.js";import"./RelationshipQuery-0dda77ad.js";import"./LegendOptions-010d0873.js";import"./utils-6786b611.js";import"./asyncUtils-437defc4.js";import"./parser-498c8be0.js";import"./mat4f32-77b3d8ac.js";import"./ItemCache-fd3aceaf.js";import"./MemCache-18a255ed.js";import"./jsonUtils-f5674613.js";import"./UniqueValueRenderer-08f8851c.js";import"./diffUtils-68b89c71.js";import"./colorRamps-9dac42c1.js";import"./sizeVariableUtils-d4870b0d.js";import"./compilerUtils-18d58939.js";import"./lengthUtils-fa751420.js";import"./jsonUtils-0ff4ff96.js";import"./styleUtils-22b14a8b.js";import"./DictionaryLoader-1cbfea53.js";import"./LRUCache-64ec42ee.js";import"./deprecate-035b199e.js";import"./heatmapUtils-aaea3f32.js";import"./vec4f64-e407da96.js";import"./featureConversionUtils-03a03f40.js";import"./TopFeaturesQuery-cad97c37.js";import"./FeatureLayer-041050b6.js";import"./MultiOriginJSONSupport-aae3bc0c.js";import"./LayerFloorInfo-54b916a2.js";import"./FeatureLayerBase-ad5cfa1a.js";import"./HeightModelInfo-5d01231e.js";import"./arcgisLayerUrl-c09f09b4.js";import"./OperationalLayer-97084f13.js";import"./ElevationInfo-215614d8.js";import"./Layer-5ffe0eda.js";import"./editsZScale-6a661299.js";import"./APIKeyMixin-a0a8917a.js";import"./ArcGISService-21dc1d06.js";import"./BlendLayer-20d0571b.js";import"./CustomParametersMixin-47aab0a6.js";import"./EditBusLayer-e750b15b.js";import"./FeatureReductionLayer-d69dae71.js";import"./labelingInfo-607e66b8.js";import"./labelUtils-3108e8d7.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-af7a6030.js";import"./PortalLayer-b2643f87.js";import"./PortalItem-bb7e98a6.js";import"./RefreshableLayer-7f154951.js";import"./ScaleRangeLayer-4be07229.js";import"./TemporalLayer-61549309.js";import"./TimeInfo-1d30dc7c.js";import"./FeatureTemplate-c1d0bb70.js";import"./FeatureType-34d71ade.js";import"./fieldProperties-e2eeb1d5.js";import"./FieldsIndex-f104cc5f.js";import"./versionUtils-fd91f55f.js";import"./styleUtils-a989c0af.js";import"./popupUtils-86dc6b94.js";import"./mat2d-2bbb5feb.js";import"./Scheduler-540208b6.js";import"./Basemap-af7f62f8.js";import"./loadAll-b5bfa7ab.js";import"./writeUtils-e686bd33.js";import"./layerUtils-f4d08f94.js";import"./TablesMixin-bc97d131.js";import"./ViewingMode-5d7d590b.js";import"./enums-0fc02184.js";import"./vec2-528adfe4.js";import"./TileStrategy-a90cd1af.js";import"./TileStore-00ac650f.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./capabilities-302cf20d.js";import"./BoundsStore-b9fa27cc.js";import"./PooledRBush-3e149119.js";import"./mat3f64-c6305894.js";import"./sphere-2af0d852.js";import"./mat4f64-1e28eae0.js";import"./quatf64-7fd38d64.js";import"./lineSegment-10422ca0.js";import"./plane-b575face.js";import"./scaleUtils-93ad8d0c.js";import"./ElevationSamplerData-b87e0e50.js";import"./PhysicallyBasedRendering.glsl-d457fff5.js";import"./View.glsl-3ce196d4.js";import"./ShaderBuilder-a7d0da4e.js";import"./FloatPassUniform-68d54f51.js";import"./Float4PassUniform-d7bdbc81.js";import"./RgbaFloatEncoding.glsl-52af7fcf.js";import"./Texture2DPassUniform-753de459.js";import"./vec3f32-c9aa289f.js";import"./VertexAttribute-9c5c630d.js";import"./Texture2DDrawUniform-053796dc.js";import"./basicInterfaces-19ed850e.js";import"./PiUtils.glsl-db6418ee.js";import"./ReadLinearDepth.glsl-9c87a54a.js";import"./WaterSurface.glsl-c64cb8f1.js";import"./ForwardLinearDepth.glsl-56affafd.js";import"./Matrix3PassUniform-ad9f953b.js";import"./Slice.glsl-3b39b1f7.js";import"./Transform.glsl-6d2e2fd9.js";import"./OutputHighlight.glsl-fbac199a.js";import"./MultipassTerrainTest.glsl-bb236672.js";import"./NormalUtils.glsl-c12729bf.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-a11868d2.js";import"./EvaluateSceneLighting.glsl-189abc15.js";import"./VisualVariablePassParameters-d460182b.js";import"./Util-a48361c6.js";import"./SSAOBlur.glsl-8bf33b65.js";import"./ScreenSpacePass-d5e48a9b.js";import"./SSAO.glsl-980b3771.js";import"./ShaderTechniqueConfiguration-9f5b4555.js";import"./HUD.glsl-d3a072ad.js";import"./VerticalOffset.glsl-87cbb2e3.js";import"./objectResourceUtils-d556a033.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-903d1848.js";import"./vec33-e98769e8.js";import"./DefaultMaterial_COLOR_GAMMA-fe26fda8.js";import"./types-e1c0a5bf.js";import"./Version-2946cc03.js";import"./quat-3d5eec2d.js";import"./Texture-46c8c2cb.js";import"./TextureOnly.glsl-1ec9a9ef.js";import"./InterleavedLayout-984d67b2.js";import"./MixExternalColor.glsl-ab0706f7.js";import"./symbolColorUtils-b2b55883.js";import"./ObjectAndLayerIdColor.glsl-ad468647.js";import"./OutputDepth.glsl-470c8e2a.js";import"./VisualVariables.glsl-2b937327.js";import"./DiscardOrAdjustAlphaBlend.glsl-73258f38.js";import"./Normals.glsl-76f97814.js";import"./DefaultMaterial.glsl-885671b3.js";import"./VertexColor.glsl-8c022fa8.js";import"./DefaultTechniqueConfiguration-588e5ab2.js";import"./RealisticTree.glsl-b6cc03f2.js";import"./edgeProcessing-f733ce76.js";import"./deduplicate-03981d62.js";import"./projection-a69d43d0.js";import"./Octree-0a267ea2.js";import"./HUDMaterial.glsl-32cf019c.js";import"./sdfPrimitives-9858c36d.js";import"./floatRGBA-9ad35d39.js";import"./dehydratedFeatures-0557137d.js";import"./quantizationUtils-4dd81f85.js";import"./labelFormatUtils-d25d1d9e.js";import"./I3SUtil-f31a4571.js";import"./I3SBinaryReader-f4829435.js";import"./LineCallout.glsl-358ef89b.js";import"./earcut-58237617.js";import"./SnappingCandidate-970faec6.js";import"./MeshComponent-a43522cc.js";import"./MarkerSizing.glsl-566261cc.js";import"./RibbonLine.glsl-0f7c2bbc.js";import"./LineStipple.glsl-ed22a88b.js";import"./callExpressionWithFeature-55effb7b.js";import"./LineMarker.glsl-8166d610.js";import"./NativeLine.glsl-742e9e29.js";import"./Path.glsl-9f6bab44.js";import"./ColorMaterial.glsl-3a70e4a7.js";import"./Pattern.glsl-67f4595b.js";import"./LercDecoder-4c9b29b3.js";import"./config-1337d16e.js";import"./workerHelper-e756ac3a.js";import"./originUtils-1469eeaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./portalItemUtils-2ccd793f.js";import"./cimAnalyzer-38842966.js";import"./BidiEngine-836b7ef6.js";import"./alignmentUtils-ae955d28.js";import"./Rect-ea14f53a.js";import"./GeometryUtils-eebff0a0.js";import"./projectionSupport-aa5eaa0d.js";import"./json-48e3ea08.js";import"./FeatureContainer-934cc4cc.js";import"./visualVariablesUtils-0d4b5279.js";import"./visualVariablesUtils-ecd70012.js";import"./TileContainer-21007653.js";import"./MaterialKey-0093a242.js";import"./Matcher-f2620e9f.js";import"./tileUtils-55e656c2.js";import"./TileClipper-4637f47d.js";import"./Geometry-daada628.js";import"./GeometryUtils-c093d234.js";import"./ExpandedCIM-b7ed8ce5.js";import"./schemaUtils-9c08f5e8.js";import"./createSymbolSchema-36503ad8.js";import"./rendererUtils-0bcb63a1.js";import"./util-4239daf3.js";import"./ComputedAttributeStorage-2b4316ba.js";import"./FeatureSetReader-7e79a15e.js";import"./centroid-5c988df3.js";import"./GraphicsView-d3b9d029.js";import"./WGLBrushVTLSymbol-d778c554.js";import"./StyleDefinition-ff072275.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-cc7f8b69.js";import"./heatmapTextureUtils-2627384f.js";import"./popupUtils-af06d391.js";let n=class extends R{constructor(){super(...arguments),this.attached=!1,this.container=new O,this.updateRequested=!1,this.type="imagery",this._bitmapView=new M}destroy(){this.attached&&(this.detach(),this.attached=!1),this.updateRequested=!1}get updating(){return!this.attached||this.isUpdating()}update(t){this.strategy.update(t).catch(i=>{$(i)||P.getLogger(this.declaredClass).error(i)})}hitTest(t){return new g({attributes:{},geometry:t.clone(),layer:this.layer})}attach(){this.container.addChild(this._bitmapView);const t=this.layer.version>=10,i=this.layer.version>=10.1?this.layer.imageMaxHeight:2048,e=this.layer.version>=10.1?this.layer.imageMaxWidth:2048;this.strategy=new J({container:this._bitmapView,imageNormalizationSupported:t,imageMaxHeight:i,imageMaxWidth:e,fetchSource:this._fetchImage.bind(this),requestUpdate:()=>this.requestUpdate()})}detach(){this.strategy.destroy(),this._bitmapView.removeAllChildren(),this.container.removeAllChildren(),this.updateRequested=!1}redraw(){this.strategy.updateExports(async t=>{if(t.source instanceof HTMLImageElement)return;const i=await this.layer.applyRenderer({extent:t.source.extent,pixelBlock:t.source.originalPixelBlock??t.source.pixelBlock}),e=t.source;e.filter=r=>this.layer.pixelFilter?this.layer.applyFilter(r):{...i,extent:e.extent}}).catch(t=>{$(t)||P.getLogger(this.declaredClass).error(t)})}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.view.requestUpdate())}isUpdating(){return this.strategy.updating||this.updateRequested}getPixelData(){if(this.updating)return null;const t=this.strategy.bitmaps;if(t.length===1&&t[0].source)return{extent:t[0].source.extent,pixelBlock:t[0].source.originalPixelBlock};if(t.length>1){const i=this.view.extent,e=t.map(o=>o.source).filter(o=>o.extent&&o.extent.intersects(i)).map(o=>({extent:o.extent,pixelBlock:o.originalPixelBlock})),r=F(e,i);return _(r)?{extent:r.extent,pixelBlock:r.pixelBlock}:null}return null}_fetchImage(t,i,e,r){return(r=r||{}).timeExtent=this.timeExtent,r.requestAsImageElement=!0,this.layer.fetchImage(t,i,e,r).then(o=>o.imageOrCanvasElement?o.imageOrCanvasElement:this.layer.applyRenderer(o.pixelData,{signal:r.signal}).then(p=>{const m=new j(p.pixelBlock,p.extent.clone(),o.pixelData.pixelBlock);return m.filter=u=>this.layer.applyFilter(u),m}))}};s([a()],n.prototype,"attached",void 0),s([a()],n.prototype,"container",void 0),s([a()],n.prototype,"layer",void 0),s([a()],n.prototype,"strategy",void 0),s([a()],n.prototype,"timeExtent",void 0),s([a()],n.prototype,"view",void 0),s([a()],n.prototype,"updateRequested",void 0),s([a()],n.prototype,"updating",null),s([a()],n.prototype,"type",void 0),n=s([x("esri.views.2d.layers.imagery.ImageryView2D")],n);const tt=n;class it extends K{constructor(){super(...arguments),this.symbolTypes=["triangle"]}get requiresDedicatedFBO(){return!1}prepareRenderPasses(i){const e=i.registerRenderPass({name:"imagery (vf)",brushes:[Q],target:()=>this.children,drawPhase:E.MAP});return[...super.prepareRenderPasses(i),e]}doRender(i){this.visible&&i.drawPhase===E.MAP&&this.symbolTypes.forEach(e=>{i.renderPass=e,super.doRender(i)})}}let h=class extends R{constructor(t){super(t),this.update=z((i,e)=>this._update(i,e).catch(r=>{$(r)||P.getLogger(this.declaredClass).error(r)}))}get updating(){return!!this._loading}redraw(t){if(!this.container.children.length)return;const i=this.container.children[0];i.symbolizerParameters=t,i.invalidateVAO(),this.container.symbolTypes=t.style==="wind_speed"?["scalar","triangle"]:t.style==="simple_scalar"?["scalar"]:["triangle"],this.container.requestRender()}async _update(t,i,e){if(!t.stationary)return;const{extent:r,spatialReference:o}=t.state,p=new q({xmin:r.xmin,ymin:r.ymin,xmax:r.xmax,ymax:r.ymax,spatialReference:o}),[m,u]=t.state.size;this._loading=this.fetchPixels(p,m,u,e);const w=await this._loading;this._addToDisplay(w,i,t.state),this._loading=null}_addToDisplay(t,i,e){if(k(t.pixelBlock))return this.container.children.forEach(m=>m.destroy()),void this.container.removeAllChildren();const{extent:r,pixelBlock:o}=t,p=new D(o);p.offset=[0,0],p.symbolizerParameters=i,p.rawPixelData=t,p.invalidateVAO(),p.x=r.xmin,p.y=r.ymax,p.pixelRatio=e.pixelRatio,p.rotation=e.rotation,p.resolution=e.resolution,p.width=o.width*i.symbolTileSize,p.height=o.height*i.symbolTileSize,this.container.children.forEach(m=>m.destroy()),this.container.removeAllChildren(),this.container.symbolTypes=i.style==="wind_speed"?["scalar","triangle"]:i.style==="simple_scalar"?["scalar"]:["triangle"],this.container.addChild(p)}};s([a()],h.prototype,"fetchPixels",void 0),s([a()],h.prototype,"container",void 0),s([a()],h.prototype,"_loading",void 0),s([a()],h.prototype,"updating",null),h=s([x("esri.views.2d.layers.imagery.ImageryVFStrategy")],h);const et=h;let l=class extends G{constructor(){super(...arguments),this.attached=!1,this.container=new it,this.type="imageryVF",this._dataParameters={exportParametersVersion:0,bbox:"",symbolTileSize:0,time:""},this._fetchpixels=async(t,i,e,r)=>{const o=await this._projectFullExtentPromise,{symbolTileSize:p}=this.layer.renderer,{extent:m,width:u,height:w}=N(t,i,e,p,o);if(_(o)&&!o.intersects(t))return{extent:m,pixelBlock:null};const v={bbox:`${m.xmin}, ${m.ymin}, ${m.xmax}, ${m.ymax}`,exportParametersVersion:this.layer.exportImageServiceParameters.version,symbolTileSize:p,time:JSON.stringify(this.timeExtent||"")};if(this._canReuseVectorFieldData(v)){const d=this.getPixelData();if(_(d)&&`${d.extent.xmin}, ${d.extent.ymin}, ${d.extent.xmax}, ${d.extent.ymax}`===v.bbox)return d}const{pixelData:f}=await this.layer.fetchImage(m,u,w,{timeExtent:this.timeExtent,requestAsImageElement:!1,signal:r});return this._dataParameters=v,k(f.pixelBlock)?{extent:m,pixelBlock:null}:{extent:m,pixelBlock:this.layer.rasterInfo.dataType==="vector-uv"?B(W(f.pixelBlock,"vector-uv")):f.pixelBlock}}}get updating(){return!this.attached||this._strategy.updating}attach(){this._projectFullExtentPromise=this._getProjectedFullExtent(this.view.spatialReference),this._strategy=new et({container:this.container,fetchPixels:this._fetchpixels}),this.handles.add(c(()=>this.layer.renderer,t=>this._updateSymbolizerParams(t),b),"vector-field-view-update")}detach(){this._strategy.destroy(),this.container.children.forEach(t=>t.destroy()),this.container.removeAllChildren(),this.handles.remove("vector-field-view-update"),this._strategy=this.container=this._projectFullExtentPromise=null}getPixelData(){if(this.updating||!this.container.children.length)return null;const{extent:t,pixelBlock:i}=this.container.children[0].rawPixelData;return{extent:t,pixelBlock:i}}hitTest(t){return new g({attributes:{},geometry:t.clone(),layer:this.layer})}update(t){this._strategy.update(t,this._symbolizerParams)}redraw(){this._updateSymbolizerParams(this.layer.renderer),this._strategy.redraw(this._symbolizerParams)}_canReuseVectorFieldData(t){const i=this._dataParameters.exportParametersVersion===t.exportParametersVersion,e=this._dataParameters.time===t.time,r=this._dataParameters.symbolTileSize===t.symbolTileSize,o=this._dataParameters.bbox===t.bbox;return i&&e&&r&&o}async _getProjectedFullExtent(t){try{return await H(this.layer.fullExtent,t)}catch{try{const e=(await L(this.layer.url,{query:{option:"footprints",outSR:t.wkid||JSON.stringify(t.toJSON()),f:"json"}})).data.featureCollection.layers[0].layerDefinition.extent;return e?q.fromJSON(e):null}catch{return null}}}_updateSymbolizerParams(t){t.type==="vector-field"&&(this._symbolizerParams=this.layer.symbolizer.generateWebGLParameters({pixelBlock:null}))}};s([a()],l.prototype,"attached",void 0),s([a()],l.prototype,"container",void 0),s([a()],l.prototype,"layer",void 0),s([a()],l.prototype,"timeExtent",void 0),s([a()],l.prototype,"type",void 0),s([a()],l.prototype,"view",void 0),s([a()],l.prototype,"updating",null),l=s([x("esri.views.2d.layers.imagery.VectorFieldView2D")],l);const rt=l;let y=class extends X(Z(T(Y))){constructor(){super(...arguments),this._exportImageVersion=-1,this._highlightGraphics=new C,this.subview=null}get pixelData(){return this.updating?null:"getPixelData"in this.subview?this.subview.getPixelData():null}async hitTest(t,i){return this.subview?[{type:"graphic",graphic:this.subview.hitTest(t),layer:this.layer,mapPoint:t}]:null}update(t){var i;(i=this.subview)==null||i.update(t)}attach(){this.layer.increaseRasterJobHandlerUsage(),this._setSubView(),this.view&&(this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new A(this.view.featuresTilingScheme)}),this.container.addChild(this._highlightView.container)),this.handles.add([c(()=>this.layer.blendMode??"normal",t=>this.subview.container.blendMode=t,b),c(()=>this.layer.effect??null,t=>this.subview.container.effect=t,b),c(()=>this.layer.exportImageServiceParameters.version,t=>{t&&this._exportImageVersion!==t&&(this._exportImageVersion=t,this.requestUpdate())},V),c(()=>this.timeExtent,t=>{this.subview.timeExtent=t,"redraw"in this.subview?this.requestUpdate():this.subview.redrawOrRefetch()},V),this.layer.on("redraw",()=>{"redraw"in this.subview?this.subview.redraw():this.subview.redrawOrRefetch()}),c(()=>this.layer.renderer,()=>this._setSubView())],"imagerylayerview-update")}detach(){var t,i;this.layer.decreaseRasterJobHandlerUsage(),this.container.removeAllChildren(),this._detachSubview(this.subview),(t=this.subview)==null||t.destroy(),this.handles.remove("imagerylayerview-update"),this.subview=null,(i=this._highlightView)==null||i.destroy(),this._exportImageVersion=-1}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(t,i){if(!((Array.isArray(t)?t[0]:S.isCollection(t)?t.getItemAt(0):t)instanceof g))return{remove:()=>{}};let e=[];return Array.isArray(t)||S.isCollection(t)?e=t.map(r=>r.clone()):t instanceof g&&(e=[t.clone()]),this._highlightGraphics.addMany(e),{remove:()=>{this._highlightGraphics.removeMany(e)}}}async doRefresh(){this.requestUpdate()}isUpdating(){return!this.subview||this.subview.updating}_setSubView(){var e,r;if(!this.view)return;const t=(e=this.layer.renderer)==null?void 0:e.type;let i="imagery";if(t==="vector-field"?i="imageryVF":t==="flow"&&(i="flow"),this.subview){const{type:o}=this.subview;if(o===i)return this._attachSubview(this.subview),void(o==="flow"?this.subview.redrawOrRefetch():o==="imagery"&&this.layer.format==="lerc"?this.subview.redraw():this.requestUpdate());this._detachSubview(this.subview),(r=this.subview)==null||r.destroy()}this.subview=i==="imagery"?new tt({layer:this.layer,view:this.view,timeExtent:this.timeExtent}):i==="imageryVF"?new rt({layer:this.layer,view:this.view,timeExtent:this.timeExtent}):new I({layer:this.layer,layerView:this}),this._attachSubview(this.subview),this.requestUpdate()}_attachSubview(t){t&&!t.attached&&(t.attach(),t.attached=!0,this.container.addChildAt(t.container,0),t.container.blendMode=this.layer.blendMode,t.container.effect=this.layer.effect)}_detachSubview(t){t!=null&&t.attached&&(this.container.removeChild(t.container),t.detach(),t.attached=!1)}};s([a()],y.prototype,"pixelData",null),s([a()],y.prototype,"subview",void 0),y=s([x("esri.views.2d.layers.ImageryLayerView2D")],y);const Ws=y;export{Ws as default};
