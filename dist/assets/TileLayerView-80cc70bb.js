import{e as s,y as m,n as f}from"./cast-fcb46737.js";import{a as n}from"./Error-ec6249b9.js";import{r as h}from"./typedArrayUtil-4d7bb04c.js";import{E as w}from"./promiseUtils-1e54421e.js";import"./ArrayPool-a8ee9378.js";import{s as d}from"./clickToleranceUtils-a273d161.js";const P=u=>{let r=class extends u{async fetchPopupFeatures(i,l){const{layer:a}=this;if(!i)throw new n("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a});if(a.type!=="tile")throw new n("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:a.type});const p=this.get("view.scale"),c=a.allSublayers.toArray().filter(e=>{const t=e.minScale===0||p<=e.minScale,o=e.maxScale===0||p>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&t&&o});return w(c.map(async e=>{const t=e.createQuery(),o=h(l)?l.event:null,y=d({renderer:e.renderer,event:o});return t.geometry=this.createFetchPopupFeaturesQueryGeometry(i,y),t.outFields=await e.popupTemplate.getRequiredFields(),(await e.queryFeatures(t)).features})).then(e=>[].concat(...e.map(t=>t.value).filter(Boolean)))}};return s([m()],r.prototype,"layer",void 0),r=s([f("esri.layers.mixins.TileLayerView")],r),r};export{P as i};
