import{e as f,y as x,n as O}from"./cast-fcb46737.js";import{U as z,a as F,g as U,h as W}from"./request-6fc81c4c.js";import{j as Y}from"./Collection-910b6f71.js";import{r as S,t as H}from"./typedArrayUtil-4d7bb04c.js";import{l as K}from"./reactiveUtils-4dabbb80.js";import"./ArrayPool-a8ee9378.js";import{w as $,a as A,k as L}from"./Extent-da876e26.js";import{r as T,t as J}from"./projection-290b739f.js";import{b as C,g as Q,d as X}from"./kmlUtils-83fc7c0c.js";import{f as Z}from"./normalizeUtils-27e29a72.js";import{i as I}from"./GraphicsCollection-c37a9ffd.js";import{S as tt,T as it,R as rt}from"./Bitmap-479ee434.js";import{a as et}from"./BitmapContainer-5fb5f7d8.js";import{y as ot}from"./LayerView2D-2775dd38.js";import{i as D}from"./GraphicContainer-ce27fa6a.js";import{o as R}from"./BaseGraphicContainer-76f5ab54.js";import{u as at}from"./LayerView-bd9a2316.js";import{C as pt,$ as st}from"./rasterProjectionHelper-a7452876.js";import{a as mt}from"./WGLContainer-8a3733a0.js";import{o as nt}from"./MaterialPrograms-b885dd99.js";import{P as M,G as P,D as j,L as q,Y as lt,V as ht,f as G}from"./enums-64ab819c.js";import{x as ct}from"./FramebufferObject-a3b9c52c.js";import{c as dt}from"./DefaultVertexAttributeLayouts-2bcf3941.js";import{y as gt}from"./index-a864af46.js";import{E as N}from"./Texture-243be4d7.js";import"./string-a318751c.js";import"./Error-ec6249b9.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-1e54421e.js";import"./preload-helper-3bce6601.js";import"./Evented-a45c8b0f.js";import"./SimpleObservable-23231131.js";import"./Ellipsoid-89682c5e.js";import"./mathUtils-b4bb77e2.js";import"./vec3-e93e648f.js";import"./vec3f64-2f9cef06.js";import"./common-c186b691.js";import"./vec4-790471c0.js";import"./unitUtils-45d1147c.js";import"./jsonMap-7b8332c9.js";import"./mat4-44a0988f.js";import"./Polyline-ff2d7c6b.js";import"./assets-8d3e737a.js";import"./aaBoundingRect-193543b5.js";import"./zscale-89472cba.js";import"./PopupTemplate-40f3c9aa.js";import"./Clonable-545593ce.js";import"./fieldUtils-7f54c4b1.js";import"./arcadeOnDemand-281a01eb.js";import"./geometry-b7901087.js";import"./typeUtils-35750739.js";import"./enumeration-3a03bd31.js";import"./number-27cf8195.js";import"./locale-30120714.js";import"./Identifiable-bfe1ff30.js";import"./aaBoundingBox-657a9b82.js";import"./jsonUtils-f5674613.js";import"./UniqueValueRenderer-08f8851c.js";import"./symbols-f8232671.js";import"./CIMSymbol-539bd447.js";import"./Symbol-f93ed9fd.js";import"./Color-fb64d77d.js";import"./colorUtils-639f4d25.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-1f7f5126.js";import"./symbolLayerUtils3D-76acc268.js";import"./persistableUrlUtils-5f719c3b.js";import"./Symbol3DAnchorPosition2D-5726d999.js";import"./collectionUtils-803d9ba8.js";import"./Portal-2bb189b3.js";import"./Loadable-268c900a.js";import"./Promise-376ab9f6.js";import"./PortalGroup-8e41557a.js";import"./PortalUser-659cc1d2.js";import"./LegendOptions-010d0873.js";import"./diffUtils-68b89c71.js";import"./colorRamps-9dac42c1.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-f0e54e86.js";import"./jsonUtils-229211af.js";import"./compilerUtils-18d58939.js";import"./lengthUtils-fa751420.js";import"./jsonUtils-0ff4ff96.js";import"./styleUtils-22b14a8b.js";import"./DictionaryLoader-1cbfea53.js";import"./LRUCache-64ec42ee.js";import"./MemCache-18a255ed.js";import"./deprecate-035b199e.js";import"./heatmapUtils-aaea3f32.js";import"./vec4f64-e407da96.js";import"./FeatureSet-d32b0eb8.js";import"./Field-61ec9870.js";import"./fieldType-f31285f7.js";import"./HandleOwner-9b396af1.js";import"./mat3-3fc68e72.js";import"./mat3f32-d3d088e8.js";import"./vec2f32-461e65a9.js";import"./context-util-a4ce3a7b.js";import"./enums-4ca4641f.js";import"./utils-317368cb.js";import"./parser-498c8be0.js";import"./mat4f32-77b3d8ac.js";import"./MaterialKey-0093a242.js";import"./alignmentUtils-ae955d28.js";import"./Utils-69cc114d.js";import"./number-954e4ab6.js";import"./enums-2658a65c.js";import"./VertexElementDescriptor-2925c6af.js";import"./cimAnalyzer-38842966.js";import"./BidiEngine-836b7ef6.js";import"./mat2d-2bbb5feb.js";import"./vec2-528adfe4.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-55effb7b.js";import"./quantizationUtils-4dd81f85.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-9ad35d39.js";import"./projectionSupport-aa5eaa0d.js";import"./json-48e3ea08.js";import"./labelingInfo-607e66b8.js";import"./labelUtils-3108e8d7.js";import"./defaultsJSON-59981e75.js";import"./FeatureContainer-934cc4cc.js";import"./Queue-b7d3cd48.js";import"./visualVariablesUtils-0d4b5279.js";import"./visualVariablesUtils-ecd70012.js";import"./TileContainer-21007653.js";import"./capabilities-302cf20d.js";import"./Matcher-f2620e9f.js";import"./TileStrategy-a90cd1af.js";import"./TileStore-00ac650f.js";import"./TileKey-5aef17b6.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-b96bcde0.js";import"./TimeExtent-23e282b9.js";import"./tileUtils-55e656c2.js";import"./TileClipper-4637f47d.js";import"./Geometry-daada628.js";import"./GeometryUtils-c093d234.js";import"./featureConversionUtils-03a03f40.js";import"./OptimizedFeature-4ab8d380.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./earcut-58237617.js";import"./ExpandedCIM-b7ed8ce5.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-9c08f5e8.js";import"./LayerFloorInfo-54b916a2.js";import"./createSymbolSchema-36503ad8.js";import"./rendererUtils-0bcb63a1.js";import"./FeatureReductionLayer-d69dae71.js";import"./BlendLayer-20d0571b.js";import"./OperationalLayer-97084f13.js";import"./ElevationInfo-215614d8.js";import"./util-4239daf3.js";import"./ComputedAttributeStorage-2b4316ba.js";import"./FeatureSetReader-7e79a15e.js";import"./centroid-5c988df3.js";import"./FieldsIndex-f104cc5f.js";import"./GraphicsView-d3b9d029.js";import"./vec3f32-c9aa289f.js";import"./WGLBrushVTLSymbol-d778c554.js";import"./StyleDefinition-ff072275.js";import"./config-1337d16e.js";import"./pixelUtils-d9cd2e49.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-cc7f8b69.js";import"./heatmapTextureUtils-2627384f.js";import"./vec2f64-30dc1443.js";import"./programUtils-f035fe8a.js";import"./Cyclical-151bcc41.js";import"./CollectionFlattener-8f4d518b.js";import"./workers-6e30d081.js";import"./Connection-9a1cf8da.js";import"./intl-65a3e389.js";import"./messages-2289086c.js";import"./TileInfo-b0eb8c90.js";import"./widget-fb292a2f.js";import"./uuid-73213768.js";import"./byteSizeEstimations-f0cab514.js";import"./executeQueryJSON-2fe748db.js";import"./query-694f7287.js";import"./pbfQueryUtils-4adda2cc.js";import"./pbf-0e99a620.js";import"./queryZScale-1481fa99.js";import"./RelationshipQuery-0dda77ad.js";import"./utils-6786b611.js";import"./asyncUtils-437defc4.js";import"./ItemCache-fd3aceaf.js";import"./TopFeaturesQuery-cad97c37.js";import"./FeatureLayer-041050b6.js";import"./MultiOriginJSONSupport-aae3bc0c.js";import"./FeatureLayerBase-ad5cfa1a.js";import"./HeightModelInfo-5d01231e.js";import"./arcgisLayerUrl-c09f09b4.js";import"./Layer-5ffe0eda.js";import"./editsZScale-6a661299.js";import"./APIKeyMixin-a0a8917a.js";import"./ArcGISService-21dc1d06.js";import"./CustomParametersMixin-47aab0a6.js";import"./EditBusLayer-e750b15b.js";import"./OrderedLayer-af7a6030.js";import"./PortalLayer-b2643f87.js";import"./PortalItem-bb7e98a6.js";import"./RefreshableLayer-7f154951.js";import"./ScaleRangeLayer-4be07229.js";import"./TemporalLayer-61549309.js";import"./TimeInfo-1d30dc7c.js";import"./FeatureTemplate-c1d0bb70.js";import"./FeatureType-34d71ade.js";import"./fieldProperties-e2eeb1d5.js";import"./versionUtils-fd91f55f.js";import"./styleUtils-a989c0af.js";import"./popupUtils-86dc6b94.js";import"./Scheduler-540208b6.js";import"./Basemap-af7f62f8.js";import"./loadAll-b5bfa7ab.js";import"./writeUtils-e686bd33.js";import"./layerUtils-f4d08f94.js";import"./TablesMixin-bc97d131.js";import"./ViewingMode-5d7d590b.js";import"./enums-0fc02184.js";import"./BoundsStore-b9fa27cc.js";import"./PooledRBush-3e149119.js";import"./mat3f64-c6305894.js";import"./sphere-2af0d852.js";import"./mat4f64-1e28eae0.js";import"./quatf64-7fd38d64.js";import"./lineSegment-10422ca0.js";import"./plane-b575face.js";import"./scaleUtils-93ad8d0c.js";import"./ElevationSamplerData-b87e0e50.js";import"./PhysicallyBasedRendering.glsl-d457fff5.js";import"./View.glsl-3ce196d4.js";import"./ShaderBuilder-a7d0da4e.js";import"./FloatPassUniform-68d54f51.js";import"./Float4PassUniform-d7bdbc81.js";import"./RgbaFloatEncoding.glsl-52af7fcf.js";import"./Texture2DPassUniform-753de459.js";import"./VertexAttribute-9c5c630d.js";import"./Texture2DDrawUniform-053796dc.js";import"./basicInterfaces-19ed850e.js";import"./PiUtils.glsl-db6418ee.js";import"./ReadLinearDepth.glsl-9c87a54a.js";import"./WaterSurface.glsl-c64cb8f1.js";import"./ForwardLinearDepth.glsl-56affafd.js";import"./Matrix3PassUniform-ad9f953b.js";import"./Slice.glsl-3b39b1f7.js";import"./Transform.glsl-6d2e2fd9.js";import"./OutputHighlight.glsl-fbac199a.js";import"./MultipassTerrainTest.glsl-bb236672.js";import"./NormalUtils.glsl-c12729bf.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-a11868d2.js";import"./EvaluateSceneLighting.glsl-189abc15.js";import"./VisualVariablePassParameters-d460182b.js";import"./Util-a48361c6.js";import"./SSAOBlur.glsl-8bf33b65.js";import"./ScreenSpacePass-d5e48a9b.js";import"./SSAO.glsl-980b3771.js";import"./ShaderTechniqueConfiguration-9f5b4555.js";import"./HUD.glsl-d3a072ad.js";import"./VerticalOffset.glsl-87cbb2e3.js";import"./objectResourceUtils-d556a033.js";import"./BufferView-903d1848.js";import"./vec33-e98769e8.js";import"./DefaultMaterial_COLOR_GAMMA-fe26fda8.js";import"./types-e1c0a5bf.js";import"./Version-2946cc03.js";import"./quat-3d5eec2d.js";import"./Texture-46c8c2cb.js";import"./TextureOnly.glsl-1ec9a9ef.js";import"./InterleavedLayout-984d67b2.js";import"./MixExternalColor.glsl-ab0706f7.js";import"./symbolColorUtils-b2b55883.js";import"./ObjectAndLayerIdColor.glsl-ad468647.js";import"./OutputDepth.glsl-470c8e2a.js";import"./VisualVariables.glsl-2b937327.js";import"./DiscardOrAdjustAlphaBlend.glsl-73258f38.js";import"./Normals.glsl-76f97814.js";import"./DefaultMaterial.glsl-885671b3.js";import"./VertexColor.glsl-8c022fa8.js";import"./DefaultTechniqueConfiguration-588e5ab2.js";import"./RealisticTree.glsl-b6cc03f2.js";import"./edgeProcessing-f733ce76.js";import"./deduplicate-03981d62.js";import"./projection-a69d43d0.js";import"./Octree-0a267ea2.js";import"./HUDMaterial.glsl-32cf019c.js";import"./sdfPrimitives-9858c36d.js";import"./dehydratedFeatures-0557137d.js";import"./labelFormatUtils-d25d1d9e.js";import"./I3SUtil-f31a4571.js";import"./I3SBinaryReader-f4829435.js";import"./LineCallout.glsl-358ef89b.js";import"./SnappingCandidate-970faec6.js";import"./MeshComponent-a43522cc.js";import"./MarkerSizing.glsl-566261cc.js";import"./RibbonLine.glsl-0f7c2bbc.js";import"./LineStipple.glsl-ed22a88b.js";import"./LineMarker.glsl-8166d610.js";import"./NativeLine.glsl-742e9e29.js";import"./Path.glsl-9f6bab44.js";import"./ColorMaterial.glsl-3a70e4a7.js";import"./Pattern.glsl-67f4595b.js";import"./LercDecoder-4c9b29b3.js";import"./workerHelper-e756ac3a.js";import"./originUtils-1469eeaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./portalItemUtils-2ccd793f.js";class l{constructor(t){if(t)this._ownsRctx=!1,this._rctx=t;else{if(l._instance)return l._instanceRefCount++,l._instance;l._instanceRefCount=1,l._instance=this,this._ownsRctx=!0;const r=document.createElement("canvas").getContext("webgl");r.getExtension("OES_texture_float"),this._rctx=new gt(r,{})}const e={applyProjection:!0,bilinear:!1,bicubic:!1},a=nt("raster/reproject","raster/reproject",new Map([["a_position",0]]),e);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new mt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,e,a=!1){const r=T(t.extent,e),o=new $({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:p,y:h}=pt(o,e,t.extent);let n=(p+h)/2;const s=Math.round((r.xmax-r.xmin)/n),c=Math.round((r.ymax-r.ymin)/n);n=(r.width/s+r.height/c)/2;const b=new $({x:n,y:n,spatialReference:r.spatialReference}),w=st({projectedExtent:r,srcBufferExtent:t.extent,pixelSize:b,hasWrapAround:!0,spacing:[16,16]}),y=dt(this._rctx,w),g=new N(this._rctx,{width:s,height:c,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:j.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1}),m=new ct(this._rctx,{colorTarget:lt.TEXTURE,depthStencilTarget:ht.NONE,width:s,height:c},g);if(this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,s,c),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind(),this._program.setUniform2f("u_srcImageSize",t.texture.descriptor.width,t.texture.descriptor.height),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",s,c),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),a){const u=new ImageData(m.descriptor.width,m.descriptor.height);return m.readPixels(0,0,m.descriptor.width,m.descriptor.height,M.RGBA,P.UNSIGNED_BYTE,u.data),m.detachColorTexture(G.COLOR_ATTACHMENT0),m.dispose(),{texture:g,extent:r,imageData:u}}return m.detachColorTexture(G.COLOR_ATTACHMENT0),m.dispose(),{texture:g,extent:r}}reprojectBitmapData(t,e){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,r=new N(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:j.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1},a),o=this.reprojectTexture({texture:r,extent:t.extent},e,!0);o.texture.dispose();const p=document.createElement("canvas");return p.width=o.imageData.width,p.height=o.imageData.height,p.getContext("2d").putImageData(o.imageData,0,0),{bitmapData:p,extent:o.extent}}async loadAndReprojectBitmapData(t,e,a){const r=(await z(t,{responseType:"image"})).data,o=document.createElement("canvas");o.width=r.width,o.height=r.height;const p=o.getContext("2d");p.drawImage(r,0,0);const h=p.getImageData(0,0,o.width,o.height);if(e.spatialReference.equals(a))return{bitmapData:h,extent:e};const n=this.reprojectBitmapData({bitmapData:h,extent:e},a);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(l._instanceRefCount--,l._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),l._instance=null)):(this._quad.dispose(),this._program.dispose())}}l._instanceRefCount=0;class B{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new et,this._kmlVisualData=new B,this.allVisiblePoints=new I,this.allVisiblePolylines=new I,this.allVisiblePolygons=new I,this.allVisibleMapImages=new Y}async hitTest(i,t){var a,r,o;const e=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(r=this._polylinesView)==null?void 0:r.hitTest(i),(o=this._polygonsView)==null?void 0:o.hitTest(i)].flat().filter(Boolean).map(p=>(p.layer=e,p.sourceLayer=e,{type:"graphic",graphic:p,layer:e,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,i=>{for(const[t,e]of this._kmlVisualData.allSublayers)e.visibility=0;for(const t of i){const e=this._kmlVisualData.allSublayers.get(t.id);e&&(e.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new l}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null),this._imageReprojector&&(this._imageReprojector.destroy(),this._imageReprojector=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,A.fromJSON(i.extent),this.view.spatialReference).then(t=>{const e=new rt(t.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});e.x=t.extent.xmin,e.y=t.extent.ymax,e.resolution=t.extent.width/t.bitmapData.width,e.rotation=i.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(i,e)})}async _getViewDependentUrl(i,t){const{viewFormat:e,viewBoundScale:a,httpQuery:r}=i;if(S(e)){if(H(t))throw new Error("Loading this network link requires a view state.");let o;if(await J(),S(a)&&a!==1){const _=new A(t.extent);_.expand(a),o=_}else o=t.extent;o=T(o,L.WGS84);const p=T(o,L.WebMercator),h=o.xmin,n=o.xmax,s=o.ymin,c=o.ymax,b=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,y=Math.max(p.width,p.height),g={"[bboxWest]":h.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":s.toString(),"[bboxNorth]":c.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":b.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":F,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=_=>{for(const E in _)for(const k in g)_[E]=_[E].replace(k,g[k])},u=U(e);m(u);let V={};S(r)&&(V=U(r),m(V));const v=Z(i.href);return v.query={...v.query,...u,...V},`${v.path}?${W(u)}`}return i.href}async _fetchService(i){const t=new B;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,e){return this._fetchParsedKML(i,e).then(async a=>{for(const r of a.sublayers){t.allSublayers.set(r.id,r);const o=r.points?await C(r.points):[],p=r.polylines?await C(r.polylines):[],h=r.polygons?await C(r.polygons):[],n=r.mapImages||[];if(t.allPoints.push(...o.map(s=>({item:s,sublayerId:r.id}))),t.allPolylines.push(...p.map(s=>({item:s,sublayerId:r.id}))),t.allPolygons.push(...h.map(s=>({item:s,sublayerId:r.id}))),t.allMapImages.push(...n.map(s=>({item:s,sublayerId:r.id}))),r.networkLink){const s=await this._getViewDependentUrl(r.networkLink,this.view.state);await this._loadVisualData(s,t,e)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(e=>X(e.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};f([x()],d.prototype,"_pointsView",void 0),f([x()],d.prototype,"_polylinesView",void 0),f([x()],d.prototype,"_polygonsView",void 0),f([x()],d.prototype,"updating",void 0),d=f([O("esri.views.2d.layers.KMLLayerView2D")],d);const rp=d;export{rp as default};
